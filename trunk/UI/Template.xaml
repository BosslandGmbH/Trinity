<ResourceDictionary 
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" 
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:po="http://schemas.microsoft.com/winfx/2006/xaml/presentation/options" 
    xmlns:Themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero"
    xmlns:ComponentModel="clr-namespace:System.ComponentModel;assembly=PresentationFramework"
    xmlns:converters="clr-namespace:Trinity.UI.UIComponents.Converters"
    xmlns:behaviors="clr-namespace:Trinity.UI.UIComponents.Behaviors"
    xmlns:ut="clr-namespace:Trinity.UI.UIComponents"
    xmlns:markupExtensions="clr-namespace:Trinity.UI.UIComponents.MarkupExtensions">

    <converters:IntToStringConverter x:Key="intToStringConverter" />
    <converters:ValueToCollectionConverter x:Key="ValueToCollectionConverter" />
    <converters:DebugDataBindingConverter x:Key="DebugDataBindingConverter" />
    <converters:IsEnumConverter x:Key="IsEnumConverter" />
    <converters:ObjectToTypeStringConverter x:Key="ObjectToTypeStringConverter" />
    <converters:TypeToStringConverter x:Key="TypeToStringConverter" />
    <converters:UriToCachedImageConverter x:Key="UrlToCachedImageConverter" />
    <converters:BoolMultiValueConverter x:Key="BoolMultiValueConverter" />
    <converters:BoolToMarginConverter x:Key="BoolToMarginConverter" Left="23" FallbackLeft="0" Invert="False" />
    <converters:BoolToVisibilityConverter x:Key="BoolToVisibilityConverter" TrueValue="Visible" FalseValue="Collapsed" />
    <converters:BoolToVisibilityConverter x:Key="InverseBoolToVisibilityConverter" TrueValue="Collapsed" FalseValue="Visible" />
    <converters:PropertyValueSourceControlTypeConverter x:Key="PropertyValueSourceControlTypeConverter" />
    <converters:FlagsEnumValueConverter x:Key="flagsEnumValueConverter" />
    <converters:FlagsEnumValueConverterBasic x:Key="HasFlagConverter" />
    <converters:FlagListParentUpdateMultiConverter x:Key="FlagListParentUpdateMultiConverter" />
    <converters:PropertyValueToCollectionConverter x:Key="PropertyValueToCollectionConverter" />
    <converters:EnumVisibilityConverter x:Key="EnumVisibilityConverter" />
    <converters:EnumVisibilityConverter x:Key="InverseEnumVisibilityConverter" Reverse="True" />
    <converters:EnumVisibilityConverter x:Key="EmptyStringToBoolConverter" Reverse="True" />
    <converters:StringFormatConverter x:Key="StringFormatConverter" />
    <converters:DisplayNameAttributeConverter x:Key="displayNameAttributeConverter" />
    <converters:PropertyValueConverter x:Key="PropertyValueConverter" />
    <converters:PropertyValuesDisabledToVisibilityConverter x:Key="PropertyValuesDisabledToVisibilityConverter" />
    <converters:EnumBooleanConverter x:Key="EnumBooleanConverter" />

    <SolidColorBrush x:Key="DisabledBorderBrush" Color="#AAA" />
    <SolidColorBrush x:Key="DisabledForegroundBrush" Color="#888" />

    <Color x:Key="CustomControlMouseOverColor">#FF3843C4</Color>
    <Color x:Key="CustomControlPressedColor">#FF211AA9</Color>
    <Color x:Key="CustomGlyphColor">#daa520</Color>
    <Color x:Key="CustomControlLightColor">White</Color>
    <Color x:Key="CustomControlMediumColor">#FF7381F9</Color>
    <Color x:Key="CustomBorderDarkColor">#FF444444</Color>
    <Color x:Key="CustomPressedBorderLightColor">#FF888888</Color>
    <Color x:Key="CustomPressedBorderDisabledLightColor">#FF555555</Color>
    <Color x:Key="CustomPressedBorderDarkColor">#FF444444</Color>
    <Color x:Key="CustomBorderLightColor">#FFCCCCCC</Color>
    <Color x:Key="CustomDisabledControlDarkColor">#FF444444</Color>
    <Color x:Key="CustomDisabledBorderLightColor">#FF888888</Color>

    <!--#region ListBox Styles -->
    
    <Style x:Key="RadioButtonToolTipListBoxStyle" TargetType="{x:Type ListBox}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Margin" Value="0"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="KeyboardNavigation.DirectionalNavigation" Value="Cycle" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <!-- fix for the default controlTemplate having a scrollviewer 
                    that blocks mouse wheel scrolling -->
                    <ItemsPresenter />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <Style TargetType="{x:Type ListBoxItem}" >
                    <Setter Property="Margin" Value="-2, 1, 3, 0" />
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <Border Background="Transparent">
                                    <RadioButton
                                    Content="{Binding Value}" ToolTip="{Binding Description}" VerticalAlignment="Center"
                                    IsChecked="{Binding Path=IsSelected,RelativeSource={RelativeSource TemplatedParent},Mode=TwoWay}"/>
                                </Border>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
    </Style>

    <!--#endregion-->
    
    <!--#region Dark Tabs Style-->
    
    <Style TargetType="{x:Type TabControl}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="Foreground" Value="Transparent" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabControl}">
                    <Grid KeyboardNavigation.TabNavigation="Local" Background="Transparent">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>
                        <TabPanel 
                            Name="HeaderPanel"
                            Grid.Row="0"
                            Panel.ZIndex="1" 
                            Margin="0,0,0,0"                             
                            IsItemsHost="True"
                            KeyboardNavigation.TabIndex="1"
                            Background="{TemplateBinding Background}" />
                        <Border 
                            Name="Border" 
                            Grid.Row="1" 
                            Background="{TemplateBinding Foreground}" 
                            BorderBrush="{TemplateBinding BorderBrush}" 
                            BorderThickness="0" 
                            CornerRadius="2" 
                            KeyboardNavigation.TabNavigation="Local"
                            KeyboardNavigation.DirectionalNavigation="Contained"
                            KeyboardNavigation.TabIndex="2" 
                            Padding="0">
                            <ContentPresenter 
                                Name="PART_SelectedContentHost"                                
                                Margin="0"
                                ContentSource="SelectedContent" />
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrush}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource DisabledBorderBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type TabItem}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabItem}">
                    <Grid x:Name="Container">
                        <Border Name="Border" Background="Transparent" Margin="0,0,0,0" Padding="0,2,0,2" BorderBrush="#474747" BorderThickness="0" CornerRadius="2,2,0,0">
                            <ContentPresenter x:Name="ContentSite" ContentSource="Header" VerticalAlignment="Center" HorizontalAlignment="Center" Margin="8,4,8,6" RecognizesAccessKey="True"/>
                        </Border>
                        <!--<Rectangle Height="100" Width="10" Margin="0,0,-10,0" Stroke="Black" VerticalAlignment="Bottom" HorizontalAlignment="Right" StrokeThickness="0" Fill="#FFD4D0C8"/>-->
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="#474747" />
                            <Setter TargetName="Container" Property="Background" Value="#474747" />
                            <Setter TargetName="Container" Property="TextBlock.Foreground" Value="#F2F2F2" />
                        </Trigger>
                        <Trigger Property="IsSelected" Value="False">
                            <Setter TargetName="Border" Property="Background" Value="#343434" />
                            <Setter TargetName="Container" Property="Background" Value="#343434" />
                            <Setter TargetName="Container" Property="TextBlock.Foreground" Value="#999999" />
                        </Trigger>                        
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="#999999" />
        <Setter Property="Margin" Value="-1,0,0,0" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="HorizontalAlignment" Value="Right" />
        <Setter Property="UseLayoutRounding" Value="True" />
    </Style>

    <Style x:Key="MainMenuTabItem" TargetType="{x:Type TabItem}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabItem}">
                    <Grid x:Name="Container" Background="#1d1d1d">
                        <Border Name="Border" Background="#1d1d1d" Margin="0,0,0,0" Padding="0,2,0,2" BorderBrush="Transparent" BorderThickness="0,0,0,0" CornerRadius="2,2,0,0">
                            <ContentPresenter x:Name="ContentSite" ContentSource="Header" VerticalAlignment="Center" HorizontalAlignment="Center" Margin="8,4,8,6" RecognizesAccessKey="True"/>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="#343434" />
                            <Setter TargetName="Container" Property="Background" Value="#343434" />
                            <Setter TargetName="Container" Property="TextBlock.Foreground" Value="#F2F2F2" />
                        </Trigger>
                        <Trigger Property="IsSelected" Value="False">
                            <Setter TargetName="Border" Property="Background" Value="#1d1d1d" />
                            <Setter TargetName="Container" Property="Background" Value="#1d1d1d" />
                            <Setter TargetName="Container" Property="TextBlock.Foreground" Value="#999999" />
                        </Trigger>
                    </ControlTemplate.Triggers>                    
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Background" Value="#1d1d1d" />
        <Setter Property="Foreground" Value="#999999" />
        <Setter Property="Margin" Value="-1,0,0,0" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="HorizontalAlignment" Value="Right" />
        <Setter Property="UseLayoutRounding" Value="True" />
    </Style>

    <Style x:Key="TertiaryTabItem" TargetType="{x:Type TabItem}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabItem}">
                    <Grid x:Name="Container" Background="#434343">
                        <Border Name="Border" Background="#434343" Margin="0,0,0,0" Padding="0,2,0,2" BorderBrush="Transparent" BorderThickness="0,0,0,0" CornerRadius="2,2,0,0">
                            <ContentPresenter x:Name="ContentSite" ContentSource="Header" VerticalAlignment="Center" HorizontalAlignment="Center" Margin="8,4,8,6" RecognizesAccessKey="True"/>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="#333333" />
                            <Setter TargetName="Container" Property="Background" Value="#333333" />
                            <Setter TargetName="Container" Property="TextBlock.Foreground" Value="#F2F2F2" />
                        </Trigger>
                        <Trigger Property="IsSelected" Value="False">
                            <Setter TargetName="Border" Property="Background" Value="#434343" />
                            <Setter TargetName="Container" Property="Background" Value="#434343" />
                            <Setter TargetName="Container" Property="TextBlock.Foreground" Value="#999999" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Background" Value="#333333" />
        <Setter Property="Foreground" Value="#999999" />
        <Setter Property="Margin" Value="-1,0,0,0" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="HorizontalAlignment" Value="Right" />
        <Setter Property="UseLayoutRounding" Value="True" />
    </Style>

    <!--#endregion-->
    
    <!--#region Expander Styles-->
    
    <ControlTemplate x:Key="ExpanderToggleButton" TargetType="{x:Type ToggleButton}">
        <Border x:Name="ExpanderButtonBorder" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>
                <Rectangle Fill="Transparent" Grid.ColumnSpan="2" />
                <Ellipse Name="Circle" Grid.Column="0" Stroke="DarkGray" Width="16" Height="16" HorizontalAlignment="Center" VerticalAlignment="Center" />
                <Path x:Name="Sign" Grid.Column="0" Data="M 0,4 H 8 M 4,0 V 8 Z" Stroke="#FF666666" Width="8" Height="8" StrokeThickness="2" HorizontalAlignment="Center" VerticalAlignment="Center" RenderTransformOrigin="0.5,0.5" />

                <ContentPresenter x:Name="HeaderContent" Grid.Column="1" Margin="4,0,0,0" ContentSource="Content" />
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Data" TargetName="Sign" Value="M 0,4 H 8 Z" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Stroke" Value="White" TargetName="Sign" />
            </Trigger>
            <DataTrigger Binding="{Binding Name}" Value="{x:Null}">
                <Setter  Property="Visibility" Value="Collapsed"/>
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style TargetType="{x:Type Expander}">
        <Setter Property="Foreground" Value="WhiteSmoke" />
        <Setter Property="HeaderTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock FontWeight="Bold" Foreground="White" Text="{Binding}" />
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Expander}">
                    <DockPanel Background="Transparent">
                        <ToggleButton x:Name="ExpanderButton" Background="Transparent" BorderThickness="0" DockPanel.Dock="Top" FontWeight="{TemplateBinding FontWeight}" Foreground="{TemplateBinding Foreground}" Template="{StaticResource ExpanderToggleButton}" Content="{TemplateBinding Header}" IsChecked="{Binding Path=IsExpanded, RelativeSource={RelativeSource TemplatedParent}}" OverridesDefaultStyle="True" Padding="0" Margin="0,2,0,5" />
                        <ContentPresenter x:Name="ExpanderContent" Margin="0,0,0,10" Visibility="Collapsed" DockPanel.Dock="Bottom" />
                    </DockPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="True">
                            <Setter TargetName="ExpanderContent" Property="Visibility" Value="Visible" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="StaticHeaderExpanderToggleButton" TargetType="{x:Type ToggleButton}">
        <Border x:Name="ExpanderButtonBorder" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}">
            <Grid Background="Transparent">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>
                <Rectangle Fill="Transparent" Grid.ColumnSpan="2" />
                <Ellipse Name="Circle" Grid.Column="0" Stroke="DarkGray" Width="16" Height="16" HorizontalAlignment="Center" VerticalAlignment="Center" />
                <Path x:Name="Sign" Grid.Column="0" Data="M 0,4 H 8 M 4,0 V 8 Z" Stroke="#FF666666" Width="8" Height="8" StrokeThickness="2" HorizontalAlignment="Center" VerticalAlignment="Center" RenderTransformOrigin="0.5,0.5" />

                <ContentPresenter x:Name="HeaderContent" Grid.Column="1" Margin="4,0,0,0" ContentSource="Content" />
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Data" TargetName="Sign" Value="M 0,4 H 8 Z" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Stroke" Value="White" TargetName="Sign" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="SlimStaticHeaderExpander" TargetType="{x:Type Expander}">
        <Style.Resources>
            <DataTemplate x:Key="ShowHeaderTemplate">
                <TextBlock Background="Transparent" FontWeight="Bold" Foreground="White">Show <Run Text="{Binding}"></Run></TextBlock>
            </DataTemplate>
            <DataTemplate x:Key="HideHeaderTemplate">
                <TextBlock Background="Transparent" FontWeight="Bold" Foreground="White">Hide <Run Text="{Binding}"></Run></TextBlock>
            </DataTemplate>
        </Style.Resources>
        <Style.Triggers>
            <Trigger Property="IsExpanded" Value="True">
                <Setter Property="HeaderTemplate" Value="{StaticResource ShowHeaderTemplate}" />
            </Trigger>
            <Trigger Property="IsExpanded" Value="False">
                <Setter Property="HeaderTemplate" Value="{StaticResource HideHeaderTemplate}" />
            </Trigger>
        </Style.Triggers>
        <Setter Property="Foreground" Value="WhiteSmoke" />
        <Setter Property="HeaderTemplate" Value="{StaticResource ShowHeaderTemplate}" />
            <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Expander}">
                    <DockPanel Background="Transparent">
                        <ToggleButton x:Name="ExpanderButton" Background="Transparent" BorderThickness="0" DockPanel.Dock="Top" FontWeight="{TemplateBinding FontWeight}" Foreground="{TemplateBinding Foreground}" Template="{StaticResource StaticHeaderExpanderToggleButton}" Content="{TemplateBinding Header}" IsChecked="{Binding Path=IsExpanded, RelativeSource={RelativeSource TemplatedParent}}" OverridesDefaultStyle="True" Padding="0" Margin="0,2,0,5" />
                        <ContentPresenter x:Name="ExpanderContent" Margin="0,0,0,0" Visibility="Collapsed" DockPanel.Dock="Bottom" />
                    </DockPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="True">
                            <Setter TargetName="ExpanderContent" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="IsExpanded" Value="False">
                            <Setter TargetName="ExpanderContent" Property="Visibility" Value="Collapsed" />
                        </Trigger>                        
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="StaticHeaderExpander" TargetType="{x:Type Expander}">
        <Setter Property="Foreground" Value="WhiteSmoke" />
        <Setter Property="HeaderTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock Background="Transparent" FontWeight="Bold" Foreground="White" Text="{Binding}"/>    
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Expander}">
                    <DockPanel Background="Transparent">
                        <ToggleButton x:Name="ExpanderButton" Background="Transparent" BorderThickness="0" DockPanel.Dock="Top" FontWeight="{TemplateBinding FontWeight}" Foreground="{TemplateBinding Foreground}" Template="{StaticResource StaticHeaderExpanderToggleButton}" Content="{TemplateBinding Header}" IsChecked="{Binding Path=IsExpanded, RelativeSource={RelativeSource TemplatedParent}}" OverridesDefaultStyle="True" Padding="0" Margin="0,2,0,5" />
                        <ContentPresenter x:Name="ExpanderContent" Margin="0,0,0,10" Visibility="Collapsed" DockPanel.Dock="Bottom" />
                    </DockPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="True">
                            <Setter TargetName="ExpanderContent" Property="Visibility" Value="Visible" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
        
    <!--#endregion-->
    
    <!--#region Sliders-->

    <ControlTemplate x:Key="Slider" TargetType="{x:Type Slider}">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="3*" />
                <ColumnDefinition MinWidth="35" MaxWidth="{TemplateBinding Tag}" Width="1*" />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition />
                <RowDefinition Height="Auto" />
                <RowDefinition />
            </Grid.RowDefinitions>
            <Slider Grid.Row="1" 
                    Value="{Binding Value, RelativeSource={RelativeSource TemplatedParent}}" 
                    Delay="{TemplateBinding Delay}" 
                    Interval="{TemplateBinding Interval}" 
                    IsEnabled="{TemplateBinding IsEnabled}" 
                    IsMoveToPointEnabled="True" 
                    IsSnapToTickEnabled="{TemplateBinding IsSnapToTickEnabled}" 
                    LargeChange="{TemplateBinding LargeChange}" 
                    Orientation="{TemplateBinding Orientation}" 
                    SmallChange="{TemplateBinding SmallChange}" 
                    TickFrequency="{TemplateBinding TickFrequency}" 
                    TickPlacement="{TemplateBinding TickPlacement}" 
                    Ticks="{TemplateBinding Ticks}" 
                    ToolTip="{TemplateBinding ToolTip}" 
                    Maximum="{TemplateBinding Maximum}" 
                    Minimum="{TemplateBinding Minimum}" 
                    HorizontalAlignment="Stretch" 
                    VerticalAlignment="Center" 
                    Margin="0,0,2,0" Style="{x:Null}" x:Name="MySlider" />
            <TextBox Grid.Column="1" Grid.Row="1" BorderBrush="#333" Text="{Binding Value, Converter={StaticResource intToStringConverter}, RelativeSource={RelativeSource TemplatedParent}}" HorizontalAlignment="Stretch" Width="Auto" Margin="0,2,2,2" TextAlignment="Center" IsReadOnly="True" />
        </Grid>
    </ControlTemplate>
    
    <ControlTemplate x:Key="LabelledSliderEditable" TargetType="{x:Type Slider}">
        <Grid Background="Transparent">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="2*"/>
                <ColumnDefinition Width="3*" />
                <ColumnDefinition MinWidth="35" Width="Auto" />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition />
                <RowDefinition Height="Auto" />
                <RowDefinition />
            </Grid.RowDefinitions>
            <TextBlock Grid.Column="0" Grid.Row="1" TextAlignment="Left" Text="{TemplateBinding Tag}" FontWeight="Normal" VerticalAlignment="Center"/>
            <Slider Grid.Column="1" Grid.Row="1" Value="{Binding Value, RelativeSource={RelativeSource TemplatedParent}}" Delay="{TemplateBinding Delay}" 
                    Interval="{TemplateBinding Interval}" IsEnabled="{TemplateBinding IsEnabled}" IsMoveToPointEnabled="True" IsSnapToTickEnabled="{TemplateBinding IsSnapToTickEnabled}" 
                    LargeChange="{TemplateBinding LargeChange}" Orientation="{TemplateBinding Orientation}" SmallChange="{TemplateBinding SmallChange}" TickFrequency="{TemplateBinding TickFrequency}" 
                    TickPlacement="{TemplateBinding TickPlacement}" Ticks="{TemplateBinding Ticks}" ToolTip="{TemplateBinding ToolTip}" 
                    Maximum="{TemplateBinding Maximum}" Minimum="{TemplateBinding Minimum}" HorizontalAlignment="Stretch" VerticalAlignment="Center" Margin="0,0,2,0" Style="{x:Null}" x:Name="MySlider" />
            <TextBox Grid.Column="2" Grid.Row="1" behaviors:SelectTextOnFocus.Active="True" behaviors:InputBindingBehavior.UpdatePropertySourceWhenEnterPressed="TextBox.Text" 
                     Text="{Binding Value, 
                Converter={StaticResource intToStringConverter}, 
                UpdateSourceTrigger=Default, 
                RelativeSource={RelativeSource TemplatedParent}}" HorizontalAlignment="Stretch" BorderBrush="#333" Margin="0,2,2,2" TextAlignment="Center" IsReadOnly="False" />
        </Grid>
    </ControlTemplate>
    
    <ControlTemplate x:Key="SliderEditable" TargetType="{x:Type Slider}">
        <Grid Background="Transparent">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="3*" />
                <ColumnDefinition MinWidth="35" MaxWidth="{TemplateBinding Tag}" Width="Auto" />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition />
                <RowDefinition Height="Auto" />
                <RowDefinition />
            </Grid.RowDefinitions>
            <Slider Grid.Row="1" Background="Transparent" Value="{Binding Value, RelativeSource={RelativeSource TemplatedParent}}" Delay="{TemplateBinding Delay}" 
                    Interval="{TemplateBinding Interval}" IsEnabled="{TemplateBinding IsEnabled}" IsMoveToPointEnabled="True" IsSnapToTickEnabled="{TemplateBinding IsSnapToTickEnabled}" 
                    LargeChange="{TemplateBinding LargeChange}" Orientation="{TemplateBinding Orientation}" SmallChange="{TemplateBinding SmallChange}" TickFrequency="{TemplateBinding TickFrequency}" 
                    TickPlacement="{TemplateBinding TickPlacement}" Ticks="{TemplateBinding Ticks}" ToolTip="{TemplateBinding ToolTip}" 
                    Maximum="{TemplateBinding Maximum}" Minimum="{TemplateBinding Minimum}" HorizontalAlignment="Stretch" VerticalAlignment="Center" Margin="0,0,2,0" Style="{x:Null}" x:Name="MySlider" />
            <TextBox Grid.Column="1" Grid.Row="1" behaviors:SelectTextOnFocus.Active="True" behaviors:InputBindingBehavior.UpdatePropertySourceWhenEnterPressed="TextBox.Text" 
                     Text="{Binding Value, 
                Converter={StaticResource intToStringConverter}, 
                UpdateSourceTrigger=Default, 
                RelativeSource={RelativeSource TemplatedParent}}" HorizontalAlignment="Stretch" BorderBrush="#333" Margin="0,2,2,2" TextAlignment="Center" IsReadOnly="False" />
        </Grid>
    </ControlTemplate>
    
    
    <!--#endregion-->

    <!--#region ComboBoxes/Dropdowns -->
    
    <!-- Shows a ComboBox without a SelectedItem -->
    <ControlTemplate x:Key="ActionsComboBoxControlTemplate" TargetType="{x:Type ComboBox}">
        <Grid x:Name="MainGrid" MinWidth="10" SnapsToDevicePixels="True">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="0" MinWidth="10" />
            </Grid.ColumnDefinitions>
            <Popup x:Name="PART_Popup" AllowsTransparency="True" Grid.ColumnSpan="2" IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}" Margin="1" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Placement="Bottom">
                <Themes:SystemDropShadowChrome x:Name="Shdw" Color="Transparent" MaxHeight="{TemplateBinding MaxDropDownHeight}" MinWidth="{Binding ActualWidth, ElementName=MainGrid}">
                    <Border x:Name="DropDownBorder" BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}" BorderThickness="1" Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}">
                        <ScrollViewer x:Name="DropDownScrollViewer">
                            <Grid RenderOptions.ClearTypeHint="Enabled">
                                <Canvas HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                    <Rectangle x:Name="OpaqueRect" Fill="{Binding Background, ElementName=DropDownBorder}" Height="{Binding ActualHeight, ElementName=DropDownBorder}" Width="{Binding ActualWidth, ElementName=DropDownBorder}" />
                                </Canvas>
                                <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            </Grid>
                        </ScrollViewer>
                    </Border>
                </Themes:SystemDropShadowChrome>
            </Popup>
            <ToggleButton BorderBrush="Transparent" Tag="{TemplateBinding Tag}" Background="{TemplateBinding Background}" Grid.ColumnSpan="2" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
                <ToggleButton.Style>
                    <Style TargetType="{x:Type ToggleButton}">
                        <Setter Property="OverridesDefaultStyle" Value="True" />
                        <Setter Property="IsTabStop" Value="False" />
                        <Setter Property="Focusable" Value="False" />
                        <Setter Property="ClickMode" Value="Press" />

                        <Setter Property="Margin" Value="0" />
                        <Setter Property="Padding" Value="0" />
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type ToggleButton}">
                                    <Border Padding="1,3,5,0" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                                        <WrapPanel>
                                            <Label Content="{TemplateBinding Tag}" Margin="0,-5,0,0" Foreground="White" />
                                            <Grid HorizontalAlignment="Right" Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}">
                                                <Path x:Name="Arrow" Data="M0,0L3.5,4 7,0z" Fill="White" HorizontalAlignment="Center" Margin="4,1,0,0" VerticalAlignment="Center" />
                                            </Grid>
                                        </WrapPanel>
                                    </Border>
                                    <ControlTemplate.Triggers>
                                        <!--<Trigger Property="IsChecked" Value="True">
                                            <Setter Property="RenderPressed" TargetName="Chrome" Value="True"/>
                                        </Trigger>-->
                                        <Trigger Property="IsEnabled" Value="False">
                                            <Setter Property="Fill" TargetName="Arrow" Value="#FFAFAFAF" />
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                </ToggleButton.Style>
            </ToggleButton>

            <!--<ContentPresenter ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" Content="{TemplateBinding SelectionBoxItem}" ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" IsHitTestVisible="False" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>-->
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="True">
                <Setter Property="Margin" TargetName="Shdw" Value="0,0,5,5" />
                <Setter Property="Color" TargetName="Shdw" Value="#71000000" />
            </Trigger>
            <Trigger Property="HasItems" Value="False">
                <Setter Property="Height" TargetName="DropDownBorder" Value="95" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                <Setter Property="Background" Value="#FFF4F4F4" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsGrouping" Value="True" />
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="False" />
            </MultiTrigger>
            <Trigger Property="CanContentScroll" SourceName="DropDownScrollViewer" Value="False">
                <Setter Property="Canvas.Top" TargetName="OpaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}" />
                <Setter Property="Canvas.Left" TargetName="OpaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="LinkComboBoxControlTemplate" TargetType="{x:Type ComboBox}">
        <Grid x:Name="MainGrid" MinWidth="10" SnapsToDevicePixels="True">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="0" MinWidth="10" />
            </Grid.ColumnDefinitions>
            <Popup x:Name="PART_Popup" AllowsTransparency="True" Grid.ColumnSpan="2" IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}" Margin="1" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Placement="Bottom">
                <Themes:SystemDropShadowChrome x:Name="Shdw" Color="Transparent" MaxHeight="{TemplateBinding MaxDropDownHeight}" MinWidth="{Binding ActualWidth, ElementName=MainGrid}">
                    <Border x:Name="DropDownBorder" BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}" BorderThickness="1" Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}">
                        <ScrollViewer x:Name="DropDownScrollViewer">
                            <Grid RenderOptions.ClearTypeHint="Enabled">
                                <Canvas HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                    <Rectangle x:Name="OpaqueRect" Fill="{Binding Background, ElementName=DropDownBorder}" Height="{Binding ActualHeight, ElementName=DropDownBorder}" Width="{Binding ActualWidth, ElementName=DropDownBorder}" />
                                </Canvas>
                                <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            </Grid>
                        </ScrollViewer>
                    </Border>
                </Themes:SystemDropShadowChrome>
            </Popup>
            <ToggleButton BorderBrush="Transparent" Tag="{TemplateBinding Tag}" Background="Transparent" Grid.ColumnSpan="2" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
                <ToggleButton.Style>
                    <Style TargetType="{x:Type ToggleButton}">
                        <Setter Property="OverridesDefaultStyle" Value="True" />
                        <Setter Property="IsTabStop" Value="False" />
                        <Setter Property="Focusable" Value="False" />
                        <Setter Property="ClickMode" Value="Press" />
                        <Setter Property="Background" Value="Transparent" />
                        <Setter Property="Margin" Value="0" />
                        <Setter Property="Padding" Value="0" />
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type ToggleButton}">
                                    <Border Padding="5,3,5,0">
                                        <WrapPanel>
                                            <Label Content="{Binding Path=SelectionBoxItem, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Foreground="White" />
                                            <Grid HorizontalAlignment="Right" Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}">
                                                <Path x:Name="Arrow" Data="M0,0L3.5,4 7,0z" Fill="White" HorizontalAlignment="Center" Margin="4,1,0,0" VerticalAlignment="Center" />
                                            </Grid>
                                        </WrapPanel>
                                    </Border>
                                    <ControlTemplate.Triggers>
                                        <!--<Trigger Property="IsChecked" Value="True">
                                            <Setter Property="RenderPressed" TargetName="Chrome" Value="True"/>
                                        </Trigger>-->
                                        <Trigger Property="IsEnabled" Value="False">
                                            <Setter Property="Fill" TargetName="Arrow" Value="#FFAFAFAF" />
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                </ToggleButton.Style>
            </ToggleButton>

            <!--<ContentPresenter ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" Content="{TemplateBinding SelectionBoxItem}" ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" IsHitTestVisible="False" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>-->
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="True">
                <Setter Property="Margin" TargetName="Shdw" Value="0,0,5,5" />
                <Setter Property="Color" TargetName="Shdw" Value="#71000000" />
            </Trigger>
            <Trigger Property="HasItems" Value="False">
                <Setter Property="Height" TargetName="DropDownBorder" Value="95" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                <Setter Property="Background" Value="#FFF4F4F4" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsGrouping" Value="True" />
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="False" />
            </MultiTrigger>
            <Trigger Property="CanContentScroll" SourceName="DropDownScrollViewer" Value="False">
                <Setter Property="Canvas.Top" TargetName="OpaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}" />
                <Setter Property="Canvas.Left" TargetName="OpaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="LinkComboBoxStyle" TargetType="{x:Type ComboBox}">
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="#FF666666" />
        <Style.BasedOn>
            <Style TargetType="{x:Type ComboBox}">
                <Setter Property="FocusVisualStyle">
                    <Setter.Value>
                        <Style>
                            <Setter Property="Control.Template">
                                <Setter.Value>
                                    <ControlTemplate>
                                        <Rectangle Margin="4,4,21,4" SnapsToDevicePixels="True" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="0" StrokeDashArray="1 2" />
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </Setter.Value>
                </Setter>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}" />
                <Setter Property="Background">
                    <Setter.Value>
                        <LinearGradientBrush po:Freeze="True" EndPoint="0,1" StartPoint="0,0">
                            <GradientStop Color="#FFF3F3F3" Offset="0" />
                            <GradientStop Color="#FFEBEBEB" Offset="0.5" />
                            <GradientStop Color="#FFDDDDDD" Offset="0.5" />
                            <GradientStop Color="#FFCDCDCD" Offset="1" />
                        </LinearGradientBrush>
                    </Setter.Value>
                </Setter>
                <Setter Property="BorderBrush" Value="Transparent" />
                <Setter Property="BorderThickness" Value="0" />
                <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
                <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
                <Setter Property="Padding" Value="4,3" />
                <Setter Property="ScrollViewer.CanContentScroll" Value="True" />
                <Setter Property="ScrollViewer.PanningMode" Value="Both" />
                <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ComboBox}">
                            <Grid x:Name="MainGrid" SnapsToDevicePixels="True">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*" />
                                    <ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Width="0" />
                                </Grid.ColumnDefinitions>
                                <Popup x:Name="PART_Popup" AllowsTransparency="True" Grid.ColumnSpan="2" IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}" Margin="1" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Placement="Bottom">
                                    <Themes:SystemDropShadowChrome x:Name="Shdw" Color="Transparent" MaxHeight="{TemplateBinding MaxDropDownHeight}" MinWidth="{Binding ActualWidth, ElementName=MainGrid}">
                                        <Border x:Name="DropDownBorder" BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}" BorderThickness="1" Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}">
                                            <ScrollViewer x:Name="DropDownScrollViewer">
                                                <Grid RenderOptions.ClearTypeHint="Enabled">
                                                    <Canvas HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                                        <Rectangle x:Name="OpaqueRect" Fill="{Binding Background, ElementName=DropDownBorder}" Height="{Binding ActualHeight, ElementName=DropDownBorder}" Width="{Binding ActualWidth, ElementName=DropDownBorder}" />
                                                    </Canvas>
                                                    <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                                </Grid>
                                            </ScrollViewer>
                                        </Border>
                                    </Themes:SystemDropShadowChrome>
                                </Popup>
                                <ToggleButton BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" Grid.ColumnSpan="2" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
                                    <ToggleButton.Style>
                                        <Style TargetType="{x:Type ToggleButton}">
                                            <Setter Property="OverridesDefaultStyle" Value="True" />
                                            <Setter Property="IsTabStop" Value="False" />
                                            <Setter Property="Focusable" Value="False" />
                                            <Setter Property="ClickMode" Value="Press" />
                                            <Setter Property="Background" Value="Transparent" />
                                            <Setter Property="Template">
                                                <Setter.Value>
                                                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                        <!--<Themes:ButtonChrome x:Name="Chrome" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" RenderMouseOver="{TemplateBinding IsMouseOver}" RenderPressed="{TemplateBinding IsPressed}" SnapsToDevicePixels="True">
                                                            
                                                        </Themes:ButtonChrome>-->
                                                        <Grid HorizontalAlignment="Right" Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}">
                                                            <Path x:Name="Arrow" Data="M0,0L3.5,4 7,0z" Fill="White" HorizontalAlignment="Center" Margin="0,1,0,0" VerticalAlignment="Center" />
                                                        </Grid>
                                                        <ControlTemplate.Triggers>
                                                            <!--<Trigger Property="IsChecked" Value="True">
                                                                <Setter Property="RenderPressed" TargetName="Chrome" Value="True"/>
                                                            </Trigger>-->
                                                            <Trigger Property="IsEnabled" Value="False">
                                                                <Setter Property="Fill" TargetName="Arrow" Value="#FFAFAFAF" />
                                                            </Trigger>
                                                        </ControlTemplate.Triggers>
                                                    </ControlTemplate>
                                                </Setter.Value>
                                            </Setter>
                                        </Style>
                                    </ToggleButton.Style>
                                </ToggleButton>
                                <ContentPresenter ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" Content="{TemplateBinding SelectionBoxItem}" ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" IsHitTestVisible="False" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="True">
                                    <Setter Property="Margin" TargetName="Shdw" Value="0,0,5,5" />
                                    <Setter Property="Color" TargetName="Shdw" Value="#71000000" />
                                </Trigger>
                                <Trigger Property="HasItems" Value="False">
                                    <Setter Property="Height" TargetName="DropDownBorder" Value="95" />
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                                    <Setter Property="Background" Value="#FFF4F4F4" />
                                </Trigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsGrouping" Value="True" />
                                        <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="False" />
                                    </MultiTrigger.Conditions>
                                    <Setter Property="ScrollViewer.CanContentScroll" Value="False" />
                                </MultiTrigger>
                                <Trigger Property="CanContentScroll" SourceName="DropDownScrollViewer" Value="False">
                                    <Setter Property="Canvas.Top" TargetName="OpaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}" />
                                    <Setter Property="Canvas.Left" TargetName="OpaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <Trigger Property="IsEditable" Value="True">
                        <Setter Property="BorderBrush">
                            <Setter.Value>
                                <LinearGradientBrush po:Freeze="True" EndPoint="0,20" MappingMode="Absolute" StartPoint="0,0">
                                    <GradientStop Color="#FFABADB3" Offset="0.05" />
                                    <GradientStop Color="#FFE2E3EA" Offset="0.07" />
                                    <GradientStop Color="#FFE3E9EF" Offset="1" />
                                </LinearGradientBrush>
                            </Setter.Value>
                        </Setter>
                        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" />
                        <Setter Property="IsTabStop" Value="False" />
                        <Setter Property="Padding" Value="3" />
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type ComboBox}">
                                    <Grid x:Name="Placement" SnapsToDevicePixels="True">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="*" />
                                            <ColumnDefinition Width="Auto" />
                                        </Grid.ColumnDefinitions>
                                        <Popup x:Name="PART_Popup" AllowsTransparency="True" Grid.ColumnSpan="2" IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Placement="Bottom">
                                            <Themes:SystemDropShadowChrome x:Name="Shdw" Color="Transparent" MaxHeight="{TemplateBinding MaxDropDownHeight}" MinWidth="{Binding ActualWidth, ElementName=Placement}">
                                                <Border x:Name="DropDownBorder" BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}" BorderThickness="1" Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}">
                                                    <ScrollViewer x:Name="DropDownScrollViewer">
                                                        <Grid RenderOptions.ClearTypeHint="Enabled">
                                                            <Canvas HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                                                <Rectangle x:Name="OpaqueRect" Fill="{Binding Background, ElementName=DropDownBorder}" Height="{Binding ActualHeight, ElementName=DropDownBorder}" Width="{Binding ActualWidth, ElementName=DropDownBorder}" />
                                                            </Canvas>
                                                            <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                                        </Grid>
                                                    </ScrollViewer>
                                                </Border>
                                            </Themes:SystemDropShadowChrome>
                                        </Popup>
                                        <!--<Themes:ListBoxChrome x:Name="Border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.ColumnSpan="2" RenderMouseOver="{TemplateBinding IsMouseOver}" RenderFocused="{TemplateBinding IsKeyboardFocusWithin}"/>-->
                                        <TextBox x:Name="PART_EditableTextBox" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}" Margin="{TemplateBinding Padding}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}">
                                            <TextBox.Style>
                                                <Style TargetType="{x:Type TextBox}">
                                                    <Setter Property="OverridesDefaultStyle" Value="True" />
                                                    <Setter Property="AllowDrop" Value="True" />
                                                    <Setter Property="MinWidth" Value="0" />
                                                    <Setter Property="MinHeight" Value="0" />
                                                    <Setter Property="FocusVisualStyle" Value="{x:Null}" />
                                                    <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst" />
                                                    <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
                                                    <Setter Property="Template">
                                                        <Setter.Value>
                                                            <ControlTemplate TargetType="{x:Type TextBox}">
                                                                <ScrollViewer x:Name="PART_ContentHost" Background="Transparent" Focusable="False" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden" />
                                                            </ControlTemplate>
                                                        </Setter.Value>
                                                    </Setter>
                                                </Style>
                                            </TextBox.Style>
                                        </TextBox>
                                        <ToggleButton Grid.Column="1" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
                                            <ToggleButton.Style>
                                                <Style TargetType="{x:Type ToggleButton}">
                                                    <Setter Property="OverridesDefaultStyle" Value="True" />
                                                    <Setter Property="IsTabStop" Value="False" />
                                                    <Setter Property="Focusable" Value="False" />
                                                    <Setter Property="ClickMode" Value="Press" />
                                                    <Setter Property="Background" Value="Transparent" />
                                                    <Setter Property="Template">
                                                        <Setter.Value>
                                                            <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                                <!--<Themes:ButtonChrome x:Name="Chrome" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" RenderMouseOver="{TemplateBinding IsMouseOver}" RenderPressed="{TemplateBinding IsPressed}" RoundCorners="False" SnapsToDevicePixels="True" Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}">
                                                                    <Path x:Name="Arrow" Data="M0,0L3.5,4 7,0z" Fill="Black" HorizontalAlignment="Center" Margin="0,1,0,0" VerticalAlignment="Center"/>
                                                                </Themes:ButtonChrome>-->
                                                                <Grid HorizontalAlignment="Right" Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}">
                                                                    <Path x:Name="Arrow" Data="M0,0L3.5,4 7,0z" Fill="White" HorizontalAlignment="Center" Margin="1,1,0,0" VerticalAlignment="Center" />
                                                                </Grid>
                                                                <ControlTemplate.Triggers>
                                                                    <!--<Trigger Property="IsChecked" Value="True">
                                                                        <Setter Property="RenderPressed" TargetName="Chrome" Value="True"/>
                                                                    </Trigger>-->
                                                                    <Trigger Property="IsEnabled" Value="False">
                                                                        <Setter Property="Fill" TargetName="Arrow" Value="#FFAFAFAF" />
                                                                    </Trigger>
                                                                </ControlTemplate.Triggers>
                                                            </ControlTemplate>
                                                        </Setter.Value>
                                                    </Setter>
                                                </Style>
                                            </ToggleButton.Style>
                                        </ToggleButton>
                                    </Grid>
                                    <ControlTemplate.Triggers>
                                        <Trigger Property="IsKeyboardFocusWithin" Value="True">
                                            <Setter Property="Foreground" Value="Black" />
                                        </Trigger>
                                        <!--<Trigger Property="IsDropDownOpen" Value="True">
                                            <Setter Property="RenderFocused" TargetName="Border" Value="True"/>
                                        </Trigger>-->
                                        <Trigger Property="HasItems" Value="False">
                                            <Setter Property="Height" TargetName="DropDownBorder" Value="95" />
                                        </Trigger>
                                        <Trigger Property="IsEnabled" Value="False">
                                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                                            <Setter Property="Background" Value="#FFF4F4F4" />
                                        </Trigger>
                                        <MultiTrigger>
                                            <MultiTrigger.Conditions>
                                                <Condition Property="IsGrouping" Value="True" />
                                                <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="False" />
                                            </MultiTrigger.Conditions>
                                            <Setter Property="ScrollViewer.CanContentScroll" Value="False" />
                                        </MultiTrigger>
                                        <Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="True">
                                            <Setter Property="Margin" TargetName="Shdw" Value="0,0,5,5" />
                                            <Setter Property="Color" TargetName="Shdw" Value="#71000000" />
                                        </Trigger>
                                        <Trigger Property="CanContentScroll" SourceName="DropDownScrollViewer" Value="False">
                                            <Setter Property="Canvas.Top" TargetName="OpaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}" />
                                            <Setter Property="Canvas.Left" TargetName="OpaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}" />
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Trigger>
                </Style.Triggers>
            </Style>
        </Style.BasedOn>
    </Style>

    <!--#endregion-->

    <!--#region Simple and Composite Templates  -->
  
    <Style x:Key="ItemsControlSelector" TargetType="{x:Type ContentPresenter}">
        <Setter Property="Margin" Value="0" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Width" Value="Auto" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="ContentTemplate" Value="{DynamicResource DefaultFormTemplate}" />
        <Setter Property="DockPanel.Dock" Value="Top" />
        <Style.Triggers>
            <!-- Note Execution order is bottom to top -->
            <DataTrigger Binding="{Binding UIControl}" Value="{x:Static ut:UIControlType.FlagsCheckboxes}">
                <Setter Property="ContentTemplate" Value="{DynamicResource PropertyValueFlagsEnumCheckboxField}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding UIControl}" Value="{x:Static ut:UIControlType.Slider}">
                <Setter Property="ContentTemplate" Value="{DynamicResource PropertyValueSliderField}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding UIControl}" Value="{x:Static ut:UIControlType.ComboBox}">
                <Setter Property="ContentTemplate" Value="{DynamicResource EnumDropdownFormTemplate}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding UIControl}" Value="{x:Static ut:UIControlType.Checkbox}">
                <Setter Property="ContentTemplate" Value="{DynamicResource CheckboxFormTemplate}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding UIControl}" Value="{x:Static ut:UIControlType.TextBox}">
                <Setter Property="ContentTemplate" Value="{DynamicResource TextboxFormTemplate}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding UIControl}" Value="{x:Static ut:UIControlType.BoundComboBox}">
                <Setter Property="ContentTemplate" Value="{DynamicResource BoundComboBoxTemplate}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding UIControl}" Value="{x:Static ut:UIControlType.BoundComboSlider}">
                <Setter Property="ContentTemplate" Value="{DynamicResource CompositeBoundComboSliderTemplate}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding UIControl}" Value="{x:Static ut:UIControlType.BoundDualComboSlider}">
                <Setter Property="ContentTemplate" Value="{DynamicResource CompositeDualComboSliderTemplate}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="SimpleItemsControlSelector" TargetType="{x:Type ContentPresenter}">
        <Setter Property="Margin" Value="0" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Width" Value="Auto" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="ContentTemplate" Value="{DynamicResource DefaultFormTemplate}" />
        <Setter Property="DockPanel.Dock" Value="Top" />
        <Style.Triggers>
            <!-- Note Execution order is bottom to top -->
            <DataTrigger Binding="{Binding UIControl}" Value="{x:Static ut:UIControlType.FlagsCheckboxes}">
                <Setter Property="ContentTemplate" Value="{DynamicResource PropertyValueFlagsEnumCheckboxField}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding UIControl}" Value="{x:Static ut:UIControlType.Slider}">
                <Setter Property="ContentTemplate" Value="{DynamicResource PropertyValueSliderField}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding UIControl}" Value="{x:Static ut:UIControlType.ComboBox}">
                <Setter Property="ContentTemplate" Value="{DynamicResource EnumDropdownFormTemplate}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding UIControl}" Value="{x:Static ut:UIControlType.Checkbox}">
                <Setter Property="ContentTemplate" Value="{DynamicResource CheckboxFormTemplate}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding UIControl}" Value="{x:Static ut:UIControlType.TextBox}">
                <Setter Property="ContentTemplate" Value="{DynamicResource TextboxFormTemplate}" />
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsInline}" Value="True" />
                    <Condition Binding="{Binding UIControl}" Value="{x:Static ut:UIControlType.Slider}"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="ContentTemplate" Value="{DynamicResource InlinePropertyValueSliderField}" />
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsInline}" Value="True" />
                    <Condition Binding="{Binding UIControl}" Value="{x:Static ut:UIControlType.ComboBox}"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="ContentTemplate" Value="{DynamicResource InlineEnumDropdownFormTemplate}" />
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsInline}" Value="True" />
                    <Condition Binding="{Binding UIControl}" Value="{x:Static ut:UIControlType.Checkbox}"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="ContentTemplate" Value="{DynamicResource InlineCheckboxFormTemplate}" />
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsInline}" Value="True" />
                    <Condition Binding="{Binding UIControl}" Value="{x:Static ut:UIControlType.TextBox}"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="ContentTemplate" Value="{DynamicResource InlineTextboxFormTemplate}" />
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="TagItemsSelector" TargetType="{x:Type ContentPresenter}">
        <Setter Property="Margin" Value="0" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Width" Value="Auto" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="ContentTemplate" Value="{DynamicResource DefaultFormTemplate}" />
        <Setter Property="DockPanel.Dock" Value="Top" />
        <Style.Triggers>
            <!-- Note Execution order is bottom to top -->
            <DataTrigger Binding="{Binding Tag, RelativeSource={RelativeSource Mode=Self}}" Value="FlagsCheckboxes">
                <Setter Property="ContentTemplate" Value="{DynamicResource PropertyValueFlagsEnumCheckboxField}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Tag, RelativeSource={RelativeSource Mode=Self}}" Value="Slider">
                <Setter Property="ContentTemplate" Value="{DynamicResource PropertyValueSliderField}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Tag, RelativeSource={RelativeSource Mode=Self}}" Value="ComboBox">
                <Setter Property="ContentTemplate" Value="{DynamicResource EnumDropdownFormTemplate}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Tag, RelativeSource={RelativeSource Mode=Self}}" Value="Checkbox">
                <Setter Property="ContentTemplate" Value="{DynamicResource CheckboxFormTemplate}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Tag, RelativeSource={RelativeSource Mode=Self}}" Value="TextBox">
                <Setter Property="ContentTemplate" Value="{DynamicResource TextboxFormTemplate}" />
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsInline}" Value="True" />
                    <Condition Binding="{Binding Tag, RelativeSource={RelativeSource Mode=Self}}" Value="Slider" />
                </MultiDataTrigger.Conditions>
                <Setter Property="ContentTemplate" Value="{DynamicResource InlinePropertyValueSliderField}" />
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsInline}" Value="True" />
                    <Condition Binding="{Binding Tag, RelativeSource={RelativeSource Mode=Self}}" Value="ComboBox" />
                </MultiDataTrigger.Conditions>
                <Setter Property="ContentTemplate" Value="{DynamicResource InlineEnumDropdownFormTemplate}" />
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsInline}" Value="True" />
                    <Condition Binding="{Binding Tag, RelativeSource={RelativeSource Mode=Self}}" Value="Checkbox" />
                </MultiDataTrigger.Conditions>
                <Setter Property="ContentTemplate" Value="{DynamicResource InlineCheckboxFormTemplate}" />
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsInline}" Value="True" />
                    <Condition Binding="{Binding Tag, RelativeSource={RelativeSource Mode=Self}}" Value="TextBox" />
                </MultiDataTrigger.Conditions>
                <Setter Property="ContentTemplate" Value="{DynamicResource InlineTextboxFormTemplate}" />
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="BuildControlSelector" TargetType="{x:Type ContentPresenter}">
        <Setter Property="Margin" Value="0" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Width" Value="Auto" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="ContentTemplate" Value="{DynamicResource SkillIconTemplate}" />
        <Setter Property="DockPanel.Dock" Value="Top" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding Type}" Value="Passive">
                <Setter Property="ContentTemplate" Value="{DynamicResource PassiveIconTemplate}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Type}" Value="Item">
                <Setter Property="ContentTemplate" Value="{DynamicResource ItemIconTemplate}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <DataTemplate x:Key="SkillIconTemplate">
        <Border BorderBrush="#222" Background="#333" BorderThickness="1,1,0,0" Margin="0,2,0,0" Padding="3,1" CornerRadius="2">
            <Grid Background="Transparent">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="50" />
                    <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>
                <Image Grid.Column="0" Height="42" Width="42" Source="{Binding Key.IconUrl, Mode=OneWay, Converter={StaticResource UrlToCachedImageConverter}, IsAsync=true}" />
                <StackPanel Grid.Column="1">
                    <Label Foreground="White" Style="{StaticResource UnselectedTitleLabelStyle}" Content="{Binding Key.Name}" />
                    <Label Foreground="LightGray" FontSize="11" Style="{StaticResource UnselectedTitleLabelStyle}" Content="{Binding Value.Name}" />
                </StackPanel>
            </Grid>
        </Border>
    </DataTemplate>

    <DataTemplate x:Key="PassiveIconTemplate">
        <Border BorderBrush="#222" Background="#333" BorderThickness="1,1,0,0" Margin="0,2,0,0" Padding="3" CornerRadius="2">
            <Grid Background="Transparent">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="50" />
                    <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>
                <Image Height="42" Width="42" Source="{Binding IconUrl, Mode=OneWay, Converter={StaticResource UrlToCachedImageConverter}, IsAsync=true}" />
                <StackPanel Grid.Column="1">
                    <Label Foreground="White" Style="{StaticResource UnselectedTitleLabelStyle}" Content="{Binding Name}" />
                </StackPanel>
            </Grid>
        </Border>
    </DataTemplate>

    <DataTemplate x:Key="ItemIconTemplate">
        <Border BorderBrush="#222" Background="#333" BorderThickness="1,1,0,0" Margin="0,2,0,0" Padding="3" CornerRadius="2">
            <StackPanel Grid.Column="1">
                <Image Height="64" Width="64" Source="{Binding IconUrl, Mode=OneWay, Converter={StaticResource UrlToCachedImageConverter}, IsAsync=true}" />
                <TextBlock Foreground="WhiteSmoke" FontSize="11" TextAlignment="Center" HorizontalAlignment="Center" TextTrimming="CharacterEllipsis" Text="{Binding Name}" />
            </StackPanel>
        </Border>
    </DataTemplate>

    <DataTemplate x:Key="EnabledRowTemplate">
        <Border Padding="10,4" Background="DarkSlateBlue" SnapsToDevicePixels="True">
            <WrapPanel>
                <TextBlock>
                    <Run Text="{Binding Converter={StaticResource displayNameAttributeConverter}, Mode=OneTime}" FontWeight="Bold" FontSize="12" Foreground="White" />
                </TextBlock>
            </WrapPanel>
        </Border>
    </DataTemplate>

    <DataTemplate x:Key="NormalRowTemplate">
        <Border Padding="10,4" Background="#222" CornerRadius="0" Margin="0,0,4,0" SnapsToDevicePixels="True">
            <WrapPanel>
                <TextBlock>
                    <Run Text="{Binding Converter={StaticResource displayNameAttributeConverter}, Mode=OneTime}" FontWeight="Bold" FontSize="12" Foreground="White" />
                </TextBlock>
            </WrapPanel>
        </Border>
    </DataTemplate>

    <Style x:Key="PropertyGroupingStyle" TargetType="{x:Type GroupItem}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Expander FontWeight="Bold" Foreground="LightSkyBlue" Header="{Binding Name}" IsExpanded="{Binding ItemList.GroupsExpandedByDefault, FallbackValue=True}">
                        <Expander.HeaderTemplate>
                            <DataTemplate>
                                <StackPanel Orientation="Horizontal">
                                    <Label Content="{Binding}" />
                                </StackPanel>
                            </DataTemplate>
                        </Expander.HeaderTemplate>
                        <ItemsPresenter />
                    </Expander>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <DataTemplate x:Key="DefaultFormTemplate">
        <Border Background="Transparent" Effect="{x:Null}" BorderBrush="#444" CornerRadius="1" Padding="0,2,2,2" BorderThickness="0,1,0,0" Visibility="{Binding IsEnabled, Converter={StaticResource BoolToVisibilityConverter}}">
            <Grid Width="Auto" HorizontalAlignment="Stretch" Margin="{Binding IsGroupChild, Converter={StaticResource BoolToMarginConverter}}">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition MinWidth="130" Width="1*" />
                    <ColumnDefinition Width="1*" />
                </Grid.ColumnDefinitions>
                <Label Grid.Column="0" Foreground="White" Style="{StaticResource UnselectedTitleLabelStyle}" Content="{Binding DisplayName}" />
                <Label Grid.Column="1" Foreground="White" Style="{StaticResource UnselectedTitleLabelStyle}" Content="{Binding Value}" />
            </Grid>
        </Border>
    </DataTemplate>

    <converters:BoolToIntConverter TrueValue="0" FalseValue="130" x:Key="BoolColumnMinWidthConverter" />
    <converters:BoolToIntConverter TrueValue="0" FalseValue="500" x:Key="BoolColumnMaxWidthConverter" />

    <DataTemplate x:Key="EnumDropdownFormTemplate">
        <Border Background="Transparent" Effect="{x:Null}" BorderBrush="#444" CornerRadius="1" Padding="0,2,2,2" BorderThickness="0,1,0,0" Visibility="{Binding IsEnabled, Converter={StaticResource BoolToVisibilityConverter}}">
            <Grid Width="Auto" HorizontalAlignment="Stretch" Margin="{Binding IsGroupChild, Converter={StaticResource BoolToMarginConverter}}">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition 
                        MinWidth="{Binding IsNoLabel, Converter={StaticResource BoolColumnMinWidthConverter}}" 
                        MaxWidth="{Binding IsNoLabel, Converter={StaticResource BoolColumnMaxWidthConverter}}"
                        Width="1*" />
                    <ColumnDefinition Width="1*" />
                </Grid.ColumnDefinitions>
                <WrapPanel>
                    <Label Grid.Column="0" Foreground="White" ToolTip="{Binding Description}" Style="{StaticResource UnselectedTitleLabelStyle}" Content="{Binding DisplayName}" />
                </WrapPanel>

                <!--
                // Note: by default WPF ComboBox checks Reference Equality for selected item.
                // To be able to display description attributes but return the actual values,
                // Wrap enums into an object with seperate display name and value path.
                -->

                <ComboBox Grid.Column="1" IsEnabled="{Binding IsEnabled}" 
                    SelectedValue="{Binding Value, Mode=TwoWay}" 
                    ItemsSource="{Binding Source.Items}" 
                    DisplayMemberPath="AltName" 
                    SelectedValuePath="Value"
                    />

            </Grid>
        </Border>
    </DataTemplate>

    <DataTemplate x:Key="InlineEnumDropdownFormTemplate">

        <!--
        // Note: by default WPF ComboBox checks Reference Equality for selected item.
        // To be able to display description attributes but return the actual values,
        // Wrap enums into an object with seperate display name and value path.
        -->

        <ComboBox IsEnabled="{Binding IsEnabled}" 
                  SelectedValue="{Binding Value, Mode=TwoWay}" 
                  ItemsSource="{Binding Source.Items}" 
                  DisplayMemberPath="AltName" 
                  SelectedValuePath="Value"
                  />

    </DataTemplate>

    <DataTemplate x:Key="CheckboxFormTemplate">
        <Border Background="Transparent" Effect="{x:Null}" BorderBrush="#444" CornerRadius="1" Padding="0,2,2,2" BorderThickness="0,1,0,0" Visibility="{Binding IsEnabled, Converter={StaticResource BoolToVisibilityConverter}}">
            <WrapPanel Margin="{Binding IsGroupChild, Converter={StaticResource BoolToMarginConverter}}">
                <CheckBox x:Name="CheckBoxFieldCheckbox" IsEnabled="{Binding IsEnabled}" IsChecked="{Binding Value}" Margin="0,0,6,0" HorizontalAlignment="Left" VerticalAlignment="Center" />
                <CheckBox IsEnabled="{Binding IsEnabled}" ToolTip="{Binding Description}" Style="{DynamicResource TextBlockCheckBox}" FontWeight="Regular" IsChecked="{Binding IsChecked, ElementName=CheckBoxFieldCheckbox}" Content="{Binding DisplayName}" Margin="0,0,0,0" />
            </WrapPanel>
        </Border>
    </DataTemplate>

    <DataTemplate x:Key="InlineCheckboxFormTemplate">
        <WrapPanel Margin="{Binding IsGroupChild, Converter={StaticResource BoolToMarginConverter}}">
            <CheckBox x:Name="CheckBoxFieldCheckbox" IsEnabled="{Binding IsEnabled}" IsChecked="{Binding Value}" Margin="0,0,6,0" HorizontalAlignment="Left" VerticalAlignment="Center" />
            <CheckBox IsEnabled="{Binding IsEnabled}" ToolTip="{Binding Description}" Style="{DynamicResource TextBlockCheckBox}" FontWeight="Regular" IsChecked="{Binding IsChecked, ElementName=CheckBoxFieldCheckbox}" Content="{Binding DisplayName}" Margin="0,0,0,0" />
        </WrapPanel>
    </DataTemplate>

    <DataTemplate x:Key="TextboxFormTemplate">
        <Border Background="Transparent" Effect="{x:Null}" BorderBrush="#444" CornerRadius="1" Padding="0,2,2,2" BorderThickness="0,1,0,0" Visibility="{Binding IsEnabled, Converter={StaticResource BoolToVisibilityConverter}}">
            <Grid Width="Auto" HorizontalAlignment="Stretch" Margin="{Binding IsGroupChild, Converter={StaticResource BoolToMarginConverter}}">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition MinWidth="130" Width="1*" />
                    <ColumnDefinition Width="1*" />
                </Grid.ColumnDefinitions>
                <Label Grid.Column="0" ToolTip="{Binding Description}" Foreground="White" Style="{StaticResource UnselectedTitleLabelStyle}" Content="{Binding DisplayName}" />
                <TextBox Grid.Column="1" IsEnabled="{Binding IsEnabled}" Text="{Binding Value, UpdateSourceTrigger=LostFocus}" behaviors:SelectTextOnFocus.Active="True" behaviors:InputBindingBehavior.UpdatePropertySourceWhenEnterPressed="TextBox.Text" MinWidth="75" />
            </Grid>
        </Border>
    </DataTemplate>

    <DataTemplate x:Key="InlineTextboxFormTemplate">
        <TextBox IsEnabled="{Binding IsEnabled}" Text="{Binding Value, UpdateSourceTrigger=LostFocus}" behaviors:SelectTextOnFocus.Active="True" behaviors:InputBindingBehavior.UpdatePropertySourceWhenEnterPressed="TextBox.Text" MinWidth="75" />
    </DataTemplate>

    <DataTemplate x:Key="PropertyValueSliderField">
        <Border Background="Transparent" Effect="{x:Null}" BorderBrush="#444" CornerRadius="1" Padding="0,2,2,2" BorderThickness="0,1,0,0" Visibility="{Binding IsEnabled, Converter={StaticResource BoolToVisibilityConverter}}">
            <Grid Width="Auto" HorizontalAlignment="Stretch" Margin="{Binding IsGroupChild, Converter={StaticResource BoolToMarginConverter}}">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition 
                        MinWidth="{Binding IsNoLabel, Converter={StaticResource BoolColumnMinWidthConverter}}" 
                        MaxWidth="{Binding IsNoLabel, Converter={StaticResource BoolColumnMaxWidthConverter}}"                        
                        Width="1*" />
                    <ColumnDefinition Width="1*" />
                </Grid.ColumnDefinitions>
                <Label Grid.Column="0" ToolTip="{Binding Description}" Foreground="White" Style="{StaticResource UnselectedTitleLabelStyle}" Content="{Binding DisplayName}" />
                <Slider Grid.Column="1" IsEnabled="{Binding IsEnabled}" 
                        Template="{DynamicResource SliderEditable}" 
                        Interval="25" Tag="50" 
                        Maximum="{Binding Max, Mode=OneWay}" 
                        Minimum="{Binding Min, Mode=OneWay}" 
                        SmallChange="{Binding Step, Mode=OneWay}"
                        TickFrequency="{Binding Step, Mode=OneWay}" 
                        IsSnapToTickEnabled="True" 
                        TickPlacement="BottomRight" 
                        Value="{Binding Value}" 
                        HorizontalAlignment="Stretch" Margin="0,0,0,0" />

            </Grid>
        </Border>
    </DataTemplate>

    <DataTemplate x:Key="InlinePropertyValueSliderField">
        <Slider IsEnabled="{Binding IsEnabled}" 
                Template="{DynamicResource SliderEditable}" 
                Interval="25" Tag="50" 
                Maximum="{Binding Max, Mode=OneWay}" 
                Minimum="{Binding Min, Mode=OneWay}" 
                SmallChange="{Binding Step, Mode=OneWay}"
                TickFrequency="{Binding Step, Mode=OneWay}" 
                IsSnapToTickEnabled="True" 
                TickPlacement="BottomRight" 
                Value="{Binding Value}" 
                Margin="0,0,0,0" />
    </DataTemplate>

    <DataTemplate x:Key="BoundComboBoxTemplate">
        <Border Background="Transparent" Effect="{x:Null}" BorderBrush="#444" CornerRadius="1" Padding="0,2,2,2" BorderThickness="0,1,0,0" Visibility="{Binding IsEnabled, Converter={StaticResource BoolToVisibilityConverter}}">
            <Grid Width="Auto" HorizontalAlignment="Stretch" Margin="{Binding IsGroupChild, Converter={StaticResource BoolToMarginConverter}}">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition 
                        MinWidth="{Binding IsNoLabel, Converter={StaticResource BoolColumnMinWidthConverter}}" 
                        MaxWidth="{Binding IsNoLabel, Converter={StaticResource BoolColumnMaxWidthConverter}}"
                        Width="1*" />
                    <ColumnDefinition Width="1*" />
                </Grid.ColumnDefinitions>
                <WrapPanel>
                    <Label Grid.Column="0" Foreground="White" ToolTip="{Binding Description}" Style="{StaticResource UnselectedTitleLabelStyle}" Content="{Binding DisplayName}" />
                </WrapPanel>
                <ComboBox Grid.Column="1" IsEnabled="{Binding IsEnabled}" SelectedValue="{Binding Value, Mode=TwoWay}" ItemsSource="{Binding BoundSource1.Items}" DisplayMemberPath="Name" SelectedValuePath="Value" />
            </Grid>
        </Border>
    </DataTemplate>

    <DataTemplate x:Key="CompositeDualComboSliderTemplate">
        <Grid Width="Auto" HorizontalAlignment="Stretch" Margin="{Binding IsGroupChild, Converter={StaticResource BoolToMarginConverter}}">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="1*"  />
                <ColumnDefinition MinWidth="130" Width="4*" />
                <ColumnDefinition Width="1*" />
            </Grid.ColumnDefinitions>
            <ContentPresenter Grid.Column="0" Content="{Binding BoundSource1.Member}" Style="{DynamicResource SimpleItemsControlSelector}" />
            <ContentPresenter Grid.Column="1" Tag="Slider" Content="{Binding Source.Member}" Style="{DynamicResource TagItemsSelector}" />
            <ContentPresenter Grid.Column="2" Content="{Binding BoundSource2.Member}" Style="{DynamicResource SimpleItemsControlSelector}" />
        </Grid>
    </DataTemplate>

    <DataTemplate x:Key="CompositeBoundComboSliderTemplate">
        <Grid Width="Auto" HorizontalAlignment="Stretch" Margin="{Binding IsGroupChild, Converter={StaticResource BoolToMarginConverter}}">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="1*"  />
                <ColumnDefinition MinWidth="130" Width="4*" />
            </Grid.ColumnDefinitions>
            <ContentPresenter Grid.Column="0" Content="{Binding BoundSource1.Member}" Style="{DynamicResource SimpleItemsControlSelector}" />
            <ContentPresenter Grid.Column="1" Tag="Slider" Content="{Binding Source.Member}" Style="{DynamicResource TagItemsSelector}" />
        </Grid>
    </DataTemplate>

    <DataTemplate x:Key="PropertyValueFlagsEnumCheckboxField">
        <Border x:Name="Container" Background="Transparent" Effect="{x:Null}" BorderBrush="#444" CornerRadius="1" Padding="0,2,2,2" BorderThickness="0,1,0,0" Visibility="{Binding IsEnabled, Converter={StaticResource BoolToVisibilityConverter}}">
            <Grid Width="Auto" HorizontalAlignment="Stretch" Margin="{Binding IsIndented, Converter={StaticResource BoolToMarginConverter}}">
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>
                <!--<Label Grid.Row="0" ToolTip="{Binding Description}" Foreground="White" Style="{StaticResource UnselectedTitleLabelStyle}" Content="{Binding DisplayName}" />-->
                <Border Grid.Row="0" Background="Transparent" Effect="{x:Null}" BorderBrush="#333" CornerRadius="2" Padding="0,2,2,10" BorderThickness="0,0,0,0">
                    <ItemsControl Tag="{Binding Value}" ItemsSource="{Binding Converter={StaticResource PropertyValueToCollectionConverter}}">
                        <ItemsControl.ItemsPanel>
                            <ItemsPanelTemplate>
                                <UniformGrid Margin="8,3,0,0"  Columns="{Binding Path=ActualWidth, ElementName=Container, Converter={markupExtensions:WidthToColumnCountExtension}, ConverterParameter='175'}"/>
                            </ItemsPanelTemplate>
                        </ItemsControl.ItemsPanel>
                        <ItemsControl.ItemTemplate>
                            <DataTemplate>
                                <WrapPanel>
                                    <CheckBox x:Name="CheckBoxFieldCheckbox" Command="{Binding Path=FlagCheckboxSetCommand}" ToolTip="{Binding Description}" CommandParameter="{Binding Tag, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ItemsControl}}}" IsEnabled="{Binding IsEnabled}" Margin="0,0,6,0" IsChecked="{Binding Value}" HorizontalAlignment="Left" VerticalAlignment="Center" />
                                    <CheckBox Command="{Binding Path=FlagCheckboxSetCommand}" CommandParameter="{Binding Tag, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ItemsControl}}}" IsEnabled="{Binding IsEnabled}" ToolTip="{Binding Description}" Style="{DynamicResource TextBlockCheckBox}" FontWeight="Regular" IsChecked="{Binding IsChecked, ElementName=CheckBoxFieldCheckbox}" Content="{Binding Name}" Margin="0,0,0,0" />
                                </WrapPanel>
                            </DataTemplate>
                        </ItemsControl.ItemTemplate>
                    </ItemsControl>
                </Border>
            </Grid>
        </Border>
    </DataTemplate>

    <!--#endregion-->

    <!--#region Scrollbar-->
    
    <SolidColorBrush x:Key="ThemeStandardBorderBrush" Color="Transparent"></SolidColorBrush>
    <SolidColorBrush x:Key="ThemeStandardBrush" Color="#9d9d9d"></SolidColorBrush>
    <SolidColorBrush x:Key="ThemePressedBrush" Color="#e3e3e3"></SolidColorBrush>
    <SolidColorBrush x:Key="ThemeHoverBrush" Color="#e3e3e3"></SolidColorBrush>
    <SolidColorBrush x:Key="ThemeDarkerStandardBrush" Color="#666666"></SolidColorBrush>
    <SolidColorBrush x:Key="ThemeGlyphBrush" Color="#666666"></SolidColorBrush>

    <Style x:Key="VerticalScrollBarThumbStyle" TargetType="{x:Type Thumb}">
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Margin" Value="1,0,1,0" />
        <Setter Property="BorderBrush" Value="{StaticResource ThemeStandardBorderBrush}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Rectangle Width="8" Name="ellipse" SnapsToDevicePixels="true" Stroke="{StaticResource ThemeStandardBorderBrush}"
                        Fill="{StaticResource ThemeStandardBrush}"
                               RadiusX="2" RadiusY="2"></Rectangle>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="ellipse" Property="Fill" Value="{StaticResource ThemeHoverBrush}"></Setter>
                        </Trigger>
                        <Trigger Property="IsDragging" Value="True">
                            <Setter TargetName="ellipse" Property="Fill" Value="{StaticResource ThemePressedBrush}"></Setter>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style x:Key="HorizontalScrollBarThumbStyle" TargetType="{x:Type Thumb}">
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Margin" Value="0,1,0,1" />
        <Setter Property="BorderBrush" Value="{StaticResource ThemeStandardBorderBrush}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Rectangle Height="8" Name="ellipse" SnapsToDevicePixels="true" Stroke="{StaticResource ThemeStandardBorderBrush}"
                        Fill="{StaticResource ThemeStandardBrush}"
                               RadiusX="2" RadiusY="2"></Rectangle>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="ellipse" Property="Fill" Value="{StaticResource ThemeHoverBrush}"></Setter>
                        </Trigger>
                        <Trigger Property="IsDragging" Value="True">
                            <Setter TargetName="ellipse" Property="Fill" Value="{StaticResource ThemePressedBrush}"></Setter>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style x:Key="LineButtonUpStyle" TargetType="{x:Type RepeatButton}">
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Grid Margin="0" Height="18" >
                        <Path Stretch="None" HorizontalAlignment="Center"
                              VerticalAlignment="Center" Name="Path"  Fill="{StaticResource ThemeDarkerStandardBrush}"
                                    Data="M 0 8 L 8 8 L 4 0 Z"></Path>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="Path" Property="Fill"
                                    Value="{StaticResource ThemeHoverBrush}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="Path" Property="Fill"
                                    Value="{StaticResource ThemePressedBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style x:Key="LineButtonDownStyle" TargetType="{x:Type RepeatButton}">
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Grid Margin="0" Height="18" >
                        <Path Stretch="None" HorizontalAlignment="Center"
                              VerticalAlignment="Center" Name="Path"  Fill="{StaticResource ThemeDarkerStandardBrush}"
                                    Data="M 0 0 L 4 8 L 8 0 Z"></Path>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="Path" Property="Fill"
                                    Value="{StaticResource ThemeHoverBrush}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="Path" Property="Fill"
                                    Value="{StaticResource ThemePressedBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style x:Key="LineButtonLeftStyle" TargetType="{x:Type RepeatButton}">
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Grid Margin="0" Width="18" >
                        <Path Stretch="None" HorizontalAlignment="Center"
                              VerticalAlignment="Center" Name="Path"  Fill="{StaticResource ThemeDarkerStandardBrush}"
                                    Data="M 0 0 L -8 4 L 0 8 Z"></Path>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="Path" Property="Fill"
                                    Value="{StaticResource ThemeHoverBrush}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="Path" Property="Fill"
                                    Value="{StaticResource ThemePressedBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style x:Key="LineButtonRightStyle" TargetType="{x:Type RepeatButton}">
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Grid Margin="0" Width="18" >
                        <Path Stretch="None" HorizontalAlignment="Center"
                              VerticalAlignment="Center" Name="Path"  Fill="{StaticResource ThemeDarkerStandardBrush}"
                                    Data="M 0 0 L 8 4 L 0 8 Z"></Path>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="Path" Property="Fill"
                                    Value="{StaticResource ThemeHoverBrush}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="Path" Property="Fill"
                                    Value="{StaticResource ThemePressedBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style x:Key="ScrollBarPageButtonStyle" TargetType="{x:Type RepeatButton}">
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border Background="Transparent" BorderThickness="0" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <ControlTemplate x:Key="VerticalScrollBar" TargetType="{x:Type ScrollBar}">
        <Grid Background="Transparent">
            <Grid.RowDefinitions>
                <RowDefinition MaxHeight="18"/>
                <RowDefinition Height="*"/>
                <RowDefinition MaxHeight="18"/>
            </Grid.RowDefinitions>
            <!--<Grid.Background>
                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                    <GradientStop Offset="0" Color="#4c4c4c"></GradientStop>
                    <GradientStop Offset="1" Color="#434343"></GradientStop>
                </LinearGradientBrush>
            </Grid.Background>-->
            <RepeatButton Grid.Row="0" Height="18"
                Style="{StaticResource LineButtonUpStyle}"
                Command="ScrollBar.LineUpCommand" >

            </RepeatButton>

            <Track Name="PART_Track" 
                   Grid.Row="1" 
                   IsDirectionReversed="True">
                <Track.DecreaseRepeatButton>
                    <RepeatButton Command="ScrollBar.PageUpCommand"
                        Style="{StaticResource ScrollBarPageButtonStyle}">
                    </RepeatButton>
                </Track.DecreaseRepeatButton>
                <Track.Thumb>
                    <Thumb Style="{StaticResource VerticalScrollBarThumbStyle}">
                    </Thumb>
                </Track.Thumb>
                <Track.IncreaseRepeatButton>
                    <RepeatButton Command="ScrollBar.PageDownCommand"
                        Style="{StaticResource ScrollBarPageButtonStyle}">
                    </RepeatButton>
                </Track.IncreaseRepeatButton>
            </Track>

            <RepeatButton Grid.Row="2" Height="18"
                Style="{StaticResource LineButtonDownStyle}"
                Command="ScrollBar.LineDownCommand">
            </RepeatButton>
        </Grid>
    </ControlTemplate>
    
    <ControlTemplate x:Key="HorizontalScrollBar" TargetType="{x:Type ScrollBar}">
        <Grid Background="Transparent">
            <Grid.ColumnDefinitions>
                <ColumnDefinition MaxWidth="18"></ColumnDefinition>
                <ColumnDefinition Width="*"></ColumnDefinition>
                <ColumnDefinition MaxWidth="18"></ColumnDefinition>
            </Grid.ColumnDefinitions>
            <!--<Grid.Background>
                <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                    <GradientStop Offset="0" Color="#4c4c4c"></GradientStop>
                    <GradientStop Offset="1" Color="#434343"></GradientStop>
                </LinearGradientBrush>
            </Grid.Background>-->
            <RepeatButton Grid.Column="0" Width="18"
                Style="{StaticResource LineButtonLeftStyle}"
                Command="ScrollBar.LineLeftCommand" >
            </RepeatButton>

            <Track Name="PART_Track" Grid.Column="1" IsDirectionReversed="False">
                <Track.DecreaseRepeatButton>
                    <RepeatButton Command="ScrollBar.PageLeftCommand"
                        Style="{StaticResource ScrollBarPageButtonStyle}">
                    </RepeatButton>
                </Track.DecreaseRepeatButton>
                <Track.Thumb>
                    <Thumb Style="{StaticResource HorizontalScrollBarThumbStyle}">
                    </Thumb>
                </Track.Thumb>
                <Track.IncreaseRepeatButton>
                    <RepeatButton Command="ScrollBar.PageRightCommand"
                        Style="{StaticResource ScrollBarPageButtonStyle}">
                    </RepeatButton>
                </Track.IncreaseRepeatButton>
            </Track>
            <RepeatButton Grid.Column="2" Width="18"
                Style="{StaticResource LineButtonRightStyle}"
                Command="ScrollBar.LineRightCommand">
            </RepeatButton>
        </Grid>
    </ControlTemplate>
    
    <Style TargetType="{x:Type ScrollBar}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Background" Value="Transparent"/>
        <Style.Triggers>
            <Trigger Property="Orientation" Value="Vertical">
                <Setter Property="Width" Value="18"/>
                <Setter Property="Height" Value="Auto" />
                <Setter Property="Template" Value="{StaticResource VerticalScrollBar}" />
            </Trigger>
            <Trigger Property="Orientation" Value="Horizontal">
                <Setter Property="Width" Value="Auto"/>
                <Setter Property="Height" Value="18" />
                <Setter Property="Template" Value="{StaticResource HorizontalScrollBar}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--#endregion-->
    
    <!--#region Graphics / Paths -->

    <Style x:Key="GrabHandlePath" TargetType="{x:Type Path}">
        <Setter Property="StrokeThickness" Value="2"/>
        <Setter Property="Width" Value="10"/>
        <Setter Property="Height" Value="10"/>
        <Setter Property="SnapsToDevicePixels" Value="False"/>
        <Setter Property="Data" Value="
                M 2 2 L 2 1 
                M 2 4 L 2 3
                M 2 6 L 2 5
                M 2 8 L 2 7
                M 2 10 L 2 9
                M 5 2 L 5 1 
                M 5 4 L 5 3
                M 5 6 L 5 5
                M 5 8 L 5 7
                M 5 10 L 5 9 "/>
        <Setter Property="Stroke">
            <Setter.Value>
                <SolidColorBrush po:Freeze="True" Color="Gray" />
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="CloseButtonPath" TargetType="{x:Type Path}">
        <Setter Property="StrokeThickness" Value="2"/>
        <Setter Property="Width" Value="10"/>
        <Setter Property="Height" Value="10"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Data" Value="M0,0 L1,1 M0,1 L1,0"/>
        <Setter Property="Stretch" Value="Uniform"/>
        <Setter Property="Stroke">
            <Setter.Value>
                <SolidColorBrush po:Freeze="True" Color="LightGray" />
            </Setter.Value>
        </Setter>
    </Style>
    
    <!--#endregion-->

    <!--#region Misc-->

    <Style TargetType="{x:Type GroupBox}">
        <Setter Property="Margin" Value="0,0,0,10" />
        <Setter Property="Foreground" Value="WhiteSmoke" />
        <Setter Property="Background" Value="#333333" />
        <Setter Property="TextBlock.Foreground" Value="WhiteSmoke" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="GroupBox">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="*" />
                        </Grid.RowDefinitions>
                        <Border Grid.Row="0" Background="{TemplateBinding Background}" CornerRadius="2" BorderBrush="#2C2C2C" BorderThickness="1" ClipToBounds="True">
                            <Grid>
                                <Border Background="Transparent" BorderBrush="#333" BorderThickness="6,6,0,0" Margin="-11,-11,0,0" Padding="0">
                                    <Border.Effect>
                                        <DropShadowEffect ShadowDepth="0" BlurRadius="5" />
                                    </Border.Effect>
                                </Border>
                                <Label FontWeight="Bold" Foreground="Tan">
                                    <ContentPresenter Margin="4,0,4,4" ContentSource="Header" RecognizesAccessKey="True" />
                                </Label>
                                <ContentPresenter Margin="12,25,12,12" />
                            </Grid>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="LinkButton" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <TextBlock TextDecorations="Underline" VerticalAlignment="Center" Margin="0,0,0,0">
                        <InlineUIContainer>
                            <ContentPresenter />
                        </InlineUIContainer>
                    </TextBlock>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Foreground" Value="#FF00AAFF" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Foreground" Value="Yellow" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{x:Type CheckBox}" TargetType="{x:Type CheckBox}">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="FocusVisualStyle" Value="{DynamicResource CheckBoxFocusVisual}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <BulletDecorator Background="Transparent">
                        <BulletDecorator.Bullet>
                            <Border x:Name="Border" Margin="0,1,0,0" Width="13" Height="13" CornerRadius="0" BorderThickness="1">
                                <Border.BorderBrush>
                                    <LinearGradientBrush po:Freeze="True" StartPoint="0,0" EndPoint="0,1">
                                        <LinearGradientBrush.GradientStops>
                                            <GradientStopCollection>
                                                <GradientStop Color="{DynamicResource CustomBorderLightColor}" Offset="0.0" />
                                                <GradientStop Color="{DynamicResource CustomBorderDarkColor}" Offset="1.0" />
                                            </GradientStopCollection>
                                        </LinearGradientBrush.GradientStops>
                                    </LinearGradientBrush>
                                </Border.BorderBrush>
                                <Border.Background>
                                    <LinearGradientBrush po:Freeze="True" StartPoint="0,0" EndPoint="0,1">
                                        <LinearGradientBrush.GradientStops>
                                            <GradientStopCollection>
                                                <GradientStop Color="{DynamicResource CustomControlLightColor}" />
                                                <GradientStop Color="{DynamicResource CustomControlMediumColor}" Offset="1.0" />
                                            </GradientStopCollection>
                                        </LinearGradientBrush.GradientStops>
                                    </LinearGradientBrush>

                                </Border.Background>
                                <Grid>
                                    <Path Visibility="Collapsed" Width="9" Height="9" x:Name="CheckMark" SnapsToDevicePixels="False" StrokeThickness="2" Data="M 1 4.5 L 4 7.5 M 4 7.5 L 8 1">
                                        <Path.Stroke>
                                            <SolidColorBrush po:Freeze="True" Color="{DynamicResource CustomGlyphColor}" />
                                        </Path.Stroke>
                                    </Path>

                                    <Path Visibility="Collapsed" Width="7" Height="7" x:Name="InderminateMark" SnapsToDevicePixels="False" StrokeThickness="2" Data="M 0 7 L 7 0">
                                        <Path.Stroke>
                                            <SolidColorBrush po:Freeze="True" Color="{DynamicResource CustomGlyphColor}" />
                                        </Path.Stroke>
                                    </Path>
                                </Grid>
                            </Border>
                        </BulletDecorator.Bullet>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Panel.Background).
                      (GradientBrush.GradientStops)[1].(GradientStop.Color)">
                                            <EasingColorKeyFrame KeyTime="0" Value="{StaticResource CustomControlMouseOverColor}" />
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Panel.Background).
                      (GradientBrush.GradientStops)[1].(GradientStop.Color)">
                                            <EasingColorKeyFrame KeyTime="0" Value="{StaticResource CustomControlPressedColor}" />
                                        </ColorAnimationUsingKeyFrames>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Border.BorderBrush).
                      (GradientBrush.GradientStops)[0].(GradientStop.Color)">
                                            <EasingColorKeyFrame KeyTime="0" Value="{StaticResource CustomPressedBorderDarkColor}" />
                                        </ColorAnimationUsingKeyFrames>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Border.BorderBrush).
                      (GradientBrush.GradientStops)[1].(GradientStop.Color)">
                                            <EasingColorKeyFrame KeyTime="0" Value="{StaticResource CustomPressedBorderLightColor}" />
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Panel.Background).
                                                (GradientBrush.GradientStops)[1].(GradientStop.Color)">
                                            <EasingColorKeyFrame KeyTime="0" Value="{StaticResource CustomPressedBorderLightColor}" />
                                        </ColorAnimationUsingKeyFrames>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Border.BorderBrush).
                                                (GradientBrush.GradientStops)[0].(GradientStop.Color)">
                                            <EasingColorKeyFrame KeyTime="0" Value="{StaticResource CustomPressedBorderDarkColor}" />
                                        </ColorAnimationUsingKeyFrames>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Border.BorderBrush).
                                                (GradientBrush.GradientStops)[1].(GradientStop.Color)">
                                            <EasingColorKeyFrame KeyTime="0" Value="{StaticResource CustomPressedBorderDisabledLightColor}" />
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="CheckStates">
                                <VisualState x:Name="Checked">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="CheckMark">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unchecked" />
                                <VisualState x:Name="Indeterminate">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="InderminateMark">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <ContentPresenter Margin="4,-1,8,0" VerticalAlignment="Center" HorizontalAlignment="Left" RecognizesAccessKey="True" />
                    </BulletDecorator>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Reset Grid to default style -->
    <Style TargetType="Grid"></Style>

    <Style x:Key="ButtonFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border>
                        <Rectangle Margin="2" StrokeThickness="1" Stroke="#60000000" StrokeDashArray="1 2" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="UnselectedTitleLabelStyle" TargetType="{x:Type Label}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Margin" Value="0,0,0,0" />
        <Setter Property="FontSize" Value="12" />
        <Setter Property="Padding" Value="0,0,0,0" />
        <Setter Property="FontWeight" Value="Normal" />
        <Setter Property="Height" Value="Auto" />
        <Setter Property="Foreground" Value="#cccccc" />
    </Style>

    <!-- Checkbox used as a label for its ability to be clicked -->
    <Style x:Key="TextBlockCheckBox" TargetType="CheckBox">
        <Setter Property="Foreground" Value="White" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="CheckBox">
                    <ContentPresenter />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type UserControl}">
        <Style.Triggers>
            <Trigger Property="ComponentModel:DesignerProperties.IsInDesignMode" Value="true">
                <Setter Property="Background" Value="#333333" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <DataTemplate x:Key="DragAdorner">
        <Border Background="Silver"
                        BorderBrush="Gray"
                        BorderThickness="1"
                        CornerRadius="2"
                        Margin="1">
            <StackPanel Orientation="Horizontal">
                <TextBlock Text="{Binding}" Margin="0,0,2,0" VerticalAlignment="Center" />
            </StackPanel>
        </Border>
    </DataTemplate>

    <Style TargetType="{x:Type RadioButton}" BasedOn="{StaticResource {x:Type RadioButton}}">
        <Setter Property="Margin" Value="0,0,10,0" />
    </Style>

    <Style x:Key="ParagonListBoxItemStyle" TargetType="ListBoxItem" BasedOn="{StaticResource {x:Type ListBoxItem}}">
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="Focusable" Value="False"/>
    </Style>

    <DataTemplate  x:Key="ParagonListBoxItemTemplate">
        <Grid Style="{x:Null}" HorizontalAlignment="Stretch" Margin="0,0,0,0" MinHeight="22" Background="Transparent">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="1*" />
                <ColumnDefinition Width="1*" />
            </Grid.ColumnDefinitions>
            <WrapPanel Grid.Column="0" VerticalAlignment="Center">
                <Path Style="{DynamicResource GrabHandlePath}" Cursor="SizeNS" />
                <TextBlock>
                            <Run Text="{Binding DisplayName, Mode=OneWay}" />
                </TextBlock>
            </WrapPanel>
            <Grid Grid.Column="1" Background="Transparent">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="1*" />
                    <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>
                <Grid Grid.Column="0" Background="Transparent" Margin="0,-2,15,-2" 
                      Visibility="{Binding IsLimited, Converter={StaticResource BoolToVisibilityConverter}}">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="1*" />
                        <ColumnDefinition Width="Auto" />
                    </Grid.ColumnDefinitions>
                    <Slider  Grid.Column="0" Template="{DynamicResource SliderEditable}"  
                                        Margin="0,0,0,0"
                                        Interval="500" Maximum="{Binding MaxLimit}" Minimum="0" 
                                        SmallChange="1" LargeChange="5"
                                        TickPlacement="None" IsMoveToPointEnabled="True"                                       
                                        Value="{Binding Limit}" 
                                        HorizontalAlignment="Stretch" />
                    <Label Grid.Column="1">points</Label>
                </Grid>
                <CheckBox Grid.Column="1" IsChecked="{Binding IsLimited}"  
                              VerticalAlignment="Center" VerticalContentAlignment="Center">
                    <TextBlock Text="Limit" Margin="0,-1,5,0"/>
                </CheckBox>
            </Grid>
        </Grid>
    </DataTemplate>

    <Style x:Key="TransparentButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Background="Transparent">
                        <ContentPresenter />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style TargetType="{x:Type Label}">
        <Setter Property="Foreground" Value="WhiteSmoke" />
    </Style>

    <!--#endregion-->

</ResourceDictionary>

