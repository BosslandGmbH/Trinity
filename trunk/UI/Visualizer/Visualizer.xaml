<UserControl xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" 
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" 
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:ut="clr-namespace:Trinity.UIComponents" 
             xmlns:radarCanvas="clr-namespace:Trinity.UI.UIComponents.RadarCanvas"
             mc:Ignorable="d" Foreground="{DynamicResource TextBush}" 
             Background="#333"
             d:DesignHeight="800" d:DesignWidth="800"
             ut:SizeObserver.Observe="True"
             ut:SizeObserver.ObservedWidth="{Binding WindowWidth, Mode=OneWayToSource}"
             ut:SizeObserver.ObservedHeight="{Binding WindowHeight, Mode=OneWayToSource}">
    <UserControl.Resources>
        <ut:BindingProxy x:Key="Proxy" Data="{Binding}" />
        <!--<Style TargetType="TabControl" />
        <Style TargetType="TabItem" />
        <Style TargetType="TabPanel" />
        <Style TargetType="CheckBox" />
        <Style TargetType="ComboBox" />
        <Style TargetType="Button" />
        <Style TargetType="Label" />
        <Style TargetType="RadioButton" />
        <Style TargetType="Grid" />
        <Style TargetType="Border" />
        <Style TargetType="Slider" />
        <Style TargetType="ScrollViewer" />
        <Style TargetType="StackPanel" />
        <Style TargetType="VirtualizingStackPanel" />
        <Style TargetType="ListBox" />
        <Style TargetType="ListBoxItem" />-->
        <ut:PropertyValueConverter x:Key="propertyValueConverter" />
        <ut:PropertyGridConverter x:Key="propertyGridConverter" />
        <ut:IntToStringConverter x:Key="intToStringConverter" Format="0:0.00" />
        <ut:PercentConverter x:Key="percentConverter" />
        <ut:EnumBooleanConverter x:Key="enumBooleanConverter" />
        <ut:EnumBooleanToGridLengthConverter x:Key="enumBooleanToGridLengthConverter" TrueValue="*" FalseValue="Auto" />
        <ut:FlagsToGridLengthConverter x:Key="flagsToAutoGridLengthConverter" TrueValue="100" FalseValue="0" />
        <ut:FlagsEnumValueConverter x:Key="flagsEnumValueConverter" />
        <ut:BoolToVisibilityConverter x:Key="visibleWhenFalseConverter" TrueValue="Collapsed" FalseValue="Visible" />
        <ut:BoolToVisibilityConverter x:Key="visibleWhenTrueConverter" TrueValue="Visible" FalseValue="Collapsed" />
        <ut:BoolInverterConverter x:Key="boolInverterConverter" />

        <DrawingBrush x:Key="Arrow35" Stretch="Uniform">
            <DrawingBrush.Drawing>
                <DrawingGroup>
                    <DrawingGroup.Children>
                        <GeometryDrawing Brush="DarkSlateGray" Geometry="F1 M 703.519,402.966L 703.519,433.18L 718.625,418.073L 703.519,402.966 Z "/>
                    </DrawingGroup.Children>
                </DrawingGroup>
            </DrawingBrush.Drawing>
        </DrawingBrush>

        <Style x:Key="ListViewTextTextBlockStyle" TargetType="{x:Type TextBlock}">
            <Setter Property="TextDecorations" Value="None" />
            <Setter Property="Foreground" Value="#444444" />
            <Style.Triggers>
                <DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType=ListViewItem, Mode=FindAncestor}}" Value="True">
                    <Setter Property="Foreground" Value="Gray" />
                    <Setter Property="TextDecorations" Value="Strikethrough" />
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="SelectableTextBlockLikeStyle" TargetType="TextBox" BasedOn="{StaticResource {x:Type TextBox}}">
            <Setter Property="IsReadOnly" Value="True"/>
            <Setter Property="IsTabStop" Value="False"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="Padding" Value="-2,0,0,0"/>
            <Style.Triggers>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsMouseOver" Value="False" />
                        <Condition Property="IsFocused" Value="False" />
                    </MultiTrigger.Conditions>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type TextBox}">
                                <TextBlock 
                                     Text="{TemplateBinding Text}" 
                                     FontSize="{TemplateBinding FontSize}"
                                     FontStyle="{TemplateBinding FontStyle}"
                                     FontFamily="{TemplateBinding FontFamily}"
                                     FontWeight="{TemplateBinding FontWeight}"
                                     TextWrapping="{TemplateBinding TextWrapping}"
                                     Foreground="{TemplateBinding Foreground}"
                                     Padding="1,1,0,0"
                                       />
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </MultiTrigger>
            </Style.Triggers>
        </Style>

        <DataTemplate x:Key="ListViewTextCellTemplate">
            <TextBlock Text="{Binding}" Style="{DynamicResource ListViewTextTextBlockStyle}" />
        </DataTemplate>
        
        <Style TargetType="{x:Type ListViewItem}">
            <Setter Property="TextElement.Foreground" Value="White" />
            <Setter Property="HorizontalContentAlignment" Value="Stretch" />
            <Style.Triggers>
                <DataTrigger Binding="{Binding InCache}" Value="">
                    <Setter Property="TextElement.Foreground" Value="Gray" />
                </DataTrigger>
                <DataTrigger Binding="{Binding TrinityType}" Value="Unknown">
                    <Setter Property="TextElement.Foreground" Value="Gray" />
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="AccordianExpander" TargetType="{x:Type Expander}">
            <Setter Property="Foreground" Value="WhiteSmoke" />
            <Setter Property="HeaderTemplate">
                <Setter.Value>
                    <DataTemplate>
                        <TextBlock FontWeight="Bold" Foreground="White" Text="{Binding}" />                       
                    </DataTemplate>
                </Setter.Value>
            </Setter>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Expander}">
                        <DockPanel Background="Transparent">
                            
                            <ToggleButton x:Name="ExpanderButton" Background="Transparent" BorderThickness="0" 
                                          DockPanel.Dock="Top" FontWeight="{TemplateBinding FontWeight}" Foreground="{TemplateBinding Foreground}" 
                                          Template="{DynamicResource AccordianExpanderToggleButton}" 
                                          Content="{TemplateBinding Header}" 
                                          IsChecked="{Binding Path=IsExpanded, RelativeSource={RelativeSource TemplatedParent}}" 
                                          OverridesDefaultStyle="True" Padding="0" Margin="1,1,0,0" />
                            
                            <Border BorderThickness="0,0,1,1" BorderBrush="#555">
                                <Border BorderThickness="1,1,0,0" BorderBrush="#333333" Background="#3C3C3C">
                                    <ContentPresenter x:Name="ExpanderContent" Margin="0,0,0,10" Visibility="Collapsed" DockPanel.Dock="Bottom" />
                                </Border>
                            </Border>
                        </DockPanel>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsExpanded" Value="True">
                                <Setter TargetName="ExpanderContent" Property="Visibility" Value="Visible" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <ControlTemplate x:Key="AccordianExpanderToggleButton" TargetType="{x:Type ToggleButton}">
            <Border BorderThickness="0,1,0,0" BorderBrush="#444" Background="Transparent" CornerRadius="1">
                <Border x:Name="ExpanderButtonBorder" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}">
                    <!--<Grid Margin="3,3,0,0">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                    -->
                        <!--<Rectangle Fill="Transparent" Grid.ColumnSpan="2" />
                        <Ellipse Name="Circle" Grid.Column="0" Stroke="DarkGray" Width="16" Height="16" HorizontalAlignment="Center" VerticalAlignment="Center" />-->
                        <!--<Path x:Name="Sign" Grid.Column="0" Data="M 0,4 H 8 M 4,0 V 8 Z" Stroke="#FF666666" Width="8" Height="8" StrokeThickness="2" 
                              HorizontalAlignment="Center" VerticalAlignment="Center" RenderTransformOrigin="0.5,0.5" />-->
                    <Grid>
                        <Grid x:Name="ExpandedIcon" Width="11" Height="11" VerticalAlignment="Center" HorizontalAlignment="Left" Margin="4,3,0,0" 
                              Background="{DynamicResource Arrow35}" >
                            <Grid.LayoutTransform>
                                <RotateTransform CenterX="0.25" CenterY="0.25" Angle="45"/>                                                               
                            </Grid.LayoutTransform>
                        </Grid>
                        <Grid x:Name="CollapsedIcon" Width="11" Height="11" VerticalAlignment="Center" HorizontalAlignment="Left" Margin="5,0,0,0" 
                              Background="{DynamicResource Arrow35}" />
                        <Border Margin="0,0,0,0" BorderThickness="1,0,0,0" BorderBrush="#444">
                            <Border Margin="0,0,0,0" Padding="17,5,5,5" BorderThickness="0,0,0,1" BorderBrush="#333">
                                <ContentPresenter  x:Name="HeaderContent" Grid.Column="1" Margin="4,0,0,0" ContentSource="Content" />
                            </Border>
                        </Border>
                    </Grid>
                </Border>
            </Border>
            <ControlTemplate.Triggers>
                <Trigger Property="IsChecked" Value="False">
                    <Setter Property="Visibility" TargetName="ExpandedIcon" Value="Collapsed" />
                    <Setter Property="Visibility" TargetName="CollapsedIcon" Value="Visible" />
                    <!--<Setter Property="Background" TargetName="ExpanderButtonBorder" Value="#444" />-->
                    <!--<Setter Property="Data" TargetName="Sign" Value="M 0,4 H 8 Z" />-->
                </Trigger>
                <Trigger Property="IsChecked" Value="True">
                    <Setter Property="Visibility" TargetName="ExpandedIcon" Value="Visible" />
                    <Setter Property="Visibility" TargetName="CollapsedIcon" Value="Collapsed" />
                </Trigger>                
                <Trigger Property="IsMouseOver" Value="true">
                    <!--<Setter Property="Background" TargetName="ExpanderButtonBorder" Value="#5a4816" />-->
                    <!--<Setter Property="Stroke" Value="White" TargetName="Sign" />-->
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
        <ut:ValueToCollectionConverter x:Key="valueToCollectionConverter" />

        <Style x:Key="PropertyGridItemsSelector" TargetType="{x:Type ContentPresenter}">
            <Setter Property="Margin" Value="0" />
            <Setter Property="FocusVisualStyle" Value="{x:Null}" />
            <Setter Property="Width" Value="Auto" />
            <Setter Property="HorizontalAlignment" Value="Stretch" />
            <Setter Property="DockPanel.Dock" Value="Top" />
            <Setter Property="ContentTemplate" Value="{DynamicResource PropertyGridMasterItem}" />
        </Style>

        <ut:OffsetWidthConverter x:Key="OffsetWidthConverter" />
        <DataTemplate x:Key="PropertyGridMasterItem">
            <Grid Width="Auto" HorizontalAlignment="Stretch" Margin="1,1,0,0">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="110"  />
                    <ColumnDefinition Width="{Binding ActualWidth, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ScrollViewer}}, Converter={StaticResource OffsetWidthConverter}, ConverterParameter=140}" />
                </Grid.ColumnDefinitions>
                <Label Grid.Column="0" MinHeight="22" Content="{Binding PropertyName}">
                    <Label.Background>
                        <SolidColorBrush Color="DodgerBlue" Opacity="0.2" />
                    </Label.Background>
                </Label>
                <TextBlock Grid.Column="1" TextTrimming="CharacterEllipsis" VerticalAlignment="Center" Margin="5,3,0,0" MinHeight="22" Text="{Binding Value}">
                    <TextBlock.Background>
                        <SolidColorBrush Color="DodgerBlue" Opacity="0.05" />
                    </TextBlock.Background>
                </TextBlock>
            </Grid>
        </DataTemplate>
        
        <ut:NullToVisibilityConverter x:Key="NullToVisibilityConverter" />
        <ut:EmptyStringToVisibilityConverter x:Key="EmptyStringToVisibilityConverter" />


    </UserControl.Resources>
    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="2.5*"/>
            <ColumnDefinition Width="5"/>
            <ColumnDefinition Width="{Binding SidePanelWidth, Mode=TwoWay}"/>
        </Grid.ColumnDefinitions>

        <Grid Grid.Column="0">
            <Grid.RowDefinitions>
                <RowDefinition Height="2.5*" />
                <RowDefinition Height="5" />
                <RowDefinition Height="{Binding GridPanelHeight, Mode=TwoWay}" />
            </Grid.RowDefinitions>
            <DockPanel Grid.Row="0">
                <Border DockPanel.Dock="Top" BorderThickness="0,0,0,1" BorderBrush="#666" Background="#444">
                    <DockPanel Height="25" Background="#444" VerticalAlignment="Stretch">
                        <TextBlock Margin="10,0,10,0" DockPanel.Dock="Left" Foreground="White" VerticalAlignment="Center">
                            <Run Text="World:"/>
                            <Run Text="{Binding WorldSnoId, FallbackValue=0}"/>
                        </TextBlock>
                        <TextBlock Margin="10,0,10,0" DockPanel.Dock="Left" Foreground="White" VerticalAlignment="Center">
                            <Run Text="LevelArea:"/>
                            <Run Text="{Binding LevelAreaSnoId, FallbackValue=0}"/>
                        </TextBlock>
                        <TextBlock Margin="10,0,10,0" DockPanel.Dock="Left" Foreground="White" VerticalAlignment="Center">
                            <Run Text="Rotation:"/>
                            <Run Text="{Binding PlayerRotation, FallbackValue=0, Converter={StaticResource intToStringConverter}}"/>
                        </TextBlock>
                        <TextBlock Margin="10,0,10,0" DockPanel.Dock="Left" Foreground="White" VerticalAlignment="Center">
                            <Run Text="Position:"/>
                            <Run Text="{Binding PlayerPositionX, FallbackValue=0, Converter={StaticResource intToStringConverter}}"/>
                            <Run Text=","/>
                            <Run Text="{Binding PlayerPositionY, FallbackValue=0, Converter={StaticResource intToStringConverter}}"/>
                            <Run Text=","/>
                            <Run Text="{Binding PlayerPositionZ, FallbackValue=0, Converter={StaticResource intToStringConverter}}"/>                        
                        </TextBlock>
                        <TextBlock Margin="10,0,10,0" DockPanel.Dock="Right" Foreground="White"  VerticalAlignment="Center">
                            <Run Text="Target:"/>
                            <Run Text="{Binding CurrentTarget.InternalName, FallbackValue=None}"/>
                            <Run Text="("/>
                            <Run Text="{Binding CurrentTarget.Distance, FallbackValue=0, Converter={StaticResource intToStringConverter}}"/>    
                            <Run Text="yd )"/>
                        </TextBlock>
                        <Border x:Name="DockFillPlaceholder"/>
                    </DockPanel>
                </Border>
                <Border>
                    <radarCanvas:RadarCanvas 
                        Width="{Binding Path=ActualWidth, RelativeSource={RelativeSource AncestorType={x:Type Border}}}"
                        Height="{Binding Path=ActualHeight, RelativeSource={RelativeSource AncestorType={x:Type Border}}}"
                        SelectedItem="{Binding SelectedObject}"
                        Background="#333333"  IsHitTestVisible="True"
                        ClickCommand="{Binding RadarClickCommand}"
                        VisibilityFlags="{Binding VisibilityFlags}"
                        ItemsSource="{Binding Objects}" 
                        Zoom="{Binding ElementName=ZoomSlider, Path=Value}" />
                </Border>
            </DockPanel>
            <GridSplitter Grid.Row="1" BorderThickness="0,1,0,0" BorderBrush="#666" Background="#444" HorizontalAlignment="Stretch"/>
            <Grid Grid.Row="2">
                <Grid>
                    <Button Margin="0,-20,0,0" Width="40" Height="22" VerticalAlignment="Top" Background="#444"  Command="{Binding ToggleGridPanelCommand}">
                        <Grid Background="Transparent">
                            <Viewbox Width="20" Height="20" Visibility="{Binding IsGridPanelExpanded, Converter={StaticResource visibleWhenFalseConverter}}">
                                <Canvas Width="24" Height="24">
                                    <Path Data="M7.41,15.41L12,10.83L16.59,15.41L18,14L12,8L6,14L7.41,15.41Z" Fill="Gray" />
                                </Canvas>
                            </Viewbox>
                            <Viewbox Width="20" Height="20" Visibility="{Binding IsGridPanelExpanded, Converter={StaticResource visibleWhenTrueConverter}}">
                                <Canvas Width="24" Height="24">
                                    <Path Data="M7.41,8.58L12,13.17L16.59,8.58L18,10L12,16L6,10L7.41,8.58Z" Fill="Gray" />
                                </Canvas>
                            </Viewbox>
                        </Grid>
                    </Button>
                    <ListView Grid.Row="0" Grid.Column="0" Tag="" ItemsSource="{Binding Objects}" IsEnabled="{Binding IsGridPanelExpanded}" SelectedItem="{Binding SelectedObject}">
                        <ListView.View>

                            <ut:AutoSizedGridView GridView.ColumnCollection="{Binding GridViewColumns, Mode=OneWayToSource}">

                                <ut:GridViewColumnExtended Visible="{Binding SelectedColumns, Converter={StaticResource flagsEnumValueConverter}, ConverterParameter=RActorGuid}" Width="Auto" DisplayMemberBinding="{Binding RActorGuid, Mode=OneWay}" CellTemplate="{StaticResource ListViewTextCellTemplate}">
                                    <GridViewColumnHeader BorderThickness="0" HorizontalContentAlignment="Left" Content="RActorGuid" 
                                  Command="{Binding SortCommand}" 
                                  CommandParameter="RActorGuid" />
                                </ut:GridViewColumnExtended>

                                <ut:GridViewColumnExtended Visible="{Binding SelectedColumns, Converter={StaticResource flagsEnumValueConverter}, ConverterParameter=ACDGuid}" Width="Auto" DisplayMemberBinding="{Binding ACDGuid, Mode=OneWay}" CellTemplate="{StaticResource ListViewTextCellTemplate}" >
                                    <GridViewColumnHeader BorderThickness="0" HorizontalContentAlignment="Left" Content="ACDGuid" 
                                  Command="{Binding SortCommand}" 
                                  CommandParameter="ACDId" />
                                </ut:GridViewColumnExtended>

                                <ut:GridViewColumnExtended Visible="{Binding SelectedColumns, Converter={StaticResource flagsEnumValueConverter}, ConverterParameter=ActorSNO}" Width="Auto" DisplayMemberBinding="{Binding ActorSNO, Mode=OneWay}" CellTemplate="{StaticResource ListViewTextCellTemplate}" >
                                    <GridViewColumnHeader BorderThickness="0" HorizontalContentAlignment="Left" Content="ActorSnoId" 
                                  Command="{Binding SortCommand}" 
                                  CommandParameter="ActorSNO" />
                                </ut:GridViewColumnExtended>

                                <ut:GridViewColumnExtended Visible="{Binding SelectedColumns, Converter={StaticResource flagsEnumValueConverter}, ConverterParameter=InternalName}" Width="225" DisplayMemberBinding="{Binding InternalName, Mode=OneWay}" CellTemplate="{StaticResource ListViewTextCellTemplate}" >
                                    <GridViewColumnHeader BorderThickness="0" HorizontalContentAlignment="Left" Content="InternalName" 
                                  Command="{Binding SortCommand}" 
                                  CommandParameter="InternalName" />
                                </ut:GridViewColumnExtended>

                                <ut:GridViewColumnExtended Visible="{Binding SelectedColumns, Converter={StaticResource flagsEnumValueConverter}, ConverterParameter=RadiusDistance}" Width="65" DisplayMemberBinding="{Binding RadiusDistance, Mode=OneWay, StringFormat={}{0:0.##}}" CellTemplate="{StaticResource ListViewTextCellTemplate}">
                                    <GridViewColumnHeader BorderThickness="0" HorizontalContentAlignment="Left" Content="RDistance" 
                                  Command="{Binding SortCommand}" 
                                  CommandParameter="RadiusDistance" />
                                </ut:GridViewColumnExtended>

                                <ut:GridViewColumnExtended Visible="{Binding SelectedColumns, Converter={StaticResource flagsEnumValueConverter}, ConverterParameter=Distance}" Width="65" DisplayMemberBinding="{Binding Distance, Mode=OneWay, StringFormat={}{0:0.##}}" CellTemplate="{StaticResource ListViewTextCellTemplate}" >
                                    <GridViewColumnHeader BorderThickness="0" HorizontalContentAlignment="Left" Content="Distance" 
                                  Command="{Binding SortCommand}" 
                                  CommandParameter="Distance" />
                                </ut:GridViewColumnExtended>

                                <ut:GridViewColumnExtended Visible="{Binding SelectedColumns, Converter={StaticResource flagsEnumValueConverter}, ConverterParameter=Weight}" Width="80" DisplayMemberBinding="{Binding Weight, Mode=OneWay, StringFormat={}{0:0.##}}" CellTemplate="{StaticResource ListViewTextCellTemplate}" >
                                    <GridViewColumnHeader BorderThickness="0" HorizontalContentAlignment="Left" Content="Weight" 
                                  Command="{Binding SortCommand}" 
                                  CommandParameter="Weight" />
                                </ut:GridViewColumnExtended>

                                <ut:GridViewColumnExtended Visible="{Binding SelectedColumns, Converter={StaticResource flagsEnumValueConverter}, ConverterParameter=TargetingType}" Width="80" DisplayMemberBinding="{Binding TargetingType, Mode=OneWay, StringFormat={}{0:0.##}}" CellTemplate="{StaticResource ListViewTextCellTemplate}">
                                    <GridViewColumnHeader BorderThickness="0" HorizontalContentAlignment="Left" Content="Targeting" 
                                  Command="{Binding SortCommand}" 
                                  CommandParameter="TargetingType" />
                                </ut:GridViewColumnExtended>

                                <ut:GridViewColumnExtended Visible="{Binding SelectedColumns, Converter={StaticResource flagsEnumValueConverter}, ConverterParameter=Type}" Width="90" DisplayMemberBinding="{Binding Type, Mode=OneWay}" CellTemplate="{StaticResource ListViewTextCellTemplate}" >
                                    <GridViewColumnHeader BorderThickness="0" HorizontalContentAlignment="Left" Content="Type" 
                                  Command="{Binding SortCommand}" 
                                  CommandParameter="Type" />
                                </ut:GridViewColumnExtended>

                                <ut:GridViewColumnExtended Visible="{Binding SelectedColumns, Converter={StaticResource flagsEnumValueConverter}, ConverterParameter=ActorType}" Width="Auto" DisplayMemberBinding="{Binding ActorType, Mode=OneWay}" CellTemplate="{StaticResource ListViewTextCellTemplate}" >
                                    <GridViewColumnHeader BorderThickness="0" Content="ActorType" 
                                  Command="{Binding SortCommand}" 
                                  CommandParameter="ActorType" />
                                </ut:GridViewColumnExtended>

                                <ut:GridViewColumnExtended Visible="{Binding SelectedColumns, Converter={StaticResource flagsEnumValueConverter}, ConverterParameter=Radius}" Width="Auto" DisplayMemberBinding="{Binding Radius, Mode=OneWay, StringFormat={}{0:0.##}}" CellTemplate="{StaticResource ListViewTextCellTemplate}" >
                                    <GridViewColumnHeader BorderThickness="0" Content="Radius" 
                                  Command="{Binding SortCommand}" 
                                  CommandParameter="Radius" />
                                </ut:GridViewColumnExtended>

                                <ut:GridViewColumnExtended Visible="{Binding SelectedColumns, Converter={StaticResource flagsEnumValueConverter}, ConverterParameter=AnimationState}" Width="Auto" DisplayMemberBinding="{Binding AnimationState, Mode=OneWay, StringFormat={}{0:0.##}}" CellTemplate="{StaticResource ListViewTextCellTemplate}" >
                                    <GridViewColumnHeader BorderThickness="0" Content="AnimState" 
                                  Command="{Binding SortCommand}" 
                                  CommandParameter="AnimationState" />
                                </ut:GridViewColumnExtended>

                                <ut:GridViewColumnExtended Visible="{Binding SelectedColumns, Converter={StaticResource flagsEnumValueConverter}, ConverterParameter=CurrentAnimation}" Width="Auto" DisplayMemberBinding="{Binding CurrentAnimation, Mode=OneWay, StringFormat={}{0:0.##}}" CellTemplate="{StaticResource ListViewTextCellTemplate}" >
                                    <GridViewColumnHeader BorderThickness="0" Content="Animation" 
                                  Command="{Binding SortCommand}" 
                                  CommandParameter="CurrentAnimation" />
                                </ut:GridViewColumnExtended>

                            </ut:AutoSizedGridView>

                        </ListView.View>
                   
                        <ListView.ContextMenu>
                            <!-- Binding of context menu is so annoying -->
                            <ContextMenu>
                                <MenuItem Header="Copy" 
                                  Command="{Binding Data.CopyCommand, Source={StaticResource Proxy}}"  
                                  CommandParameter="{Binding PlacementTarget.SelectedItem, RelativeSource={RelativeSource AncestorType=ContextMenu}}" />
                            </ContextMenu>
                        </ListView.ContextMenu>
                    </ListView>
                </Grid>
            </Grid>
        </Grid>

        <GridSplitter Grid.Column="1" BorderThickness="1,0,0,0" BorderBrush="#666" Background="#444" HorizontalAlignment="Stretch"/>

        <DockPanel Grid.Column="2">

            <Grid>

                <Button Margin="-20,0,0,0" Width="22" Height="40" HorizontalAlignment="Left" Background="#444444" Command="{Binding ToggleSidePanelCommand}">
                    <Grid Background="Transparent" Margin="-1,0,0,0">
                        <Viewbox Width="20" Height="20" Visibility="{Binding IsSidePanelExpanded, Converter={StaticResource visibleWhenFalseConverter}}">
                            <Canvas Width="24" Height="24">
                                <Path Data="M15.41,16.58L10.83,12L15.41,7.41L14,6L8,12L14,18L15.41,16.58Z" Fill="Gray" />
                            </Canvas>
                        </Viewbox>
                        <Viewbox Width="20" Height="20" Visibility="{Binding IsSidePanelExpanded, Converter={StaticResource visibleWhenTrueConverter}}">
                            <Canvas Width="24" Height="24">
                                <Path Data="M8.59,16.58L13.17,12L8.59,7.41L10,6L16,12L10,18L8.59,16.58Z" Fill="Gray" />
                            </Canvas>
                        </Viewbox>
                    </Grid>
                </Button>


<DockPanel>
                    <Border DockPanel.Dock="Top">
                        <UniformGrid Height="Auto" Margin="10" Rows="1">
                            <Button Height="30" Content="Start Thread" Command="{Binding StartThreadCommand}"
                            IsEnabled="{Binding IsBotRunning, Converter={StaticResource boolInverterConverter}}"
                            Visibility="{Binding StartThreadAllowed, Converter={StaticResource visibleWhenTrueConverter}}"/>
                            <Button Height="30" Content="Stop Thread" Command="{Binding StopThreadCommand}"
                            IsEnabled="{Binding IsBotRunning, Converter={StaticResource boolInverterConverter}}"
                            Visibility="{Binding StartThreadAllowed, Converter={StaticResource visibleWhenFalseConverter}}"/>
                            <Button Height="30" Command="{Binding PauseToggleCommand}" Content="{Binding PauseButtonText, FallbackValue=Pause}"/>
                        </UniformGrid>
                    </Border>
                    <Grid  IsEnabled="{Binding IsSidePanelExpanded}" >
                <Grid.RowDefinitions>
                    <RowDefinition Height="{Binding ExpandedPanel, Converter={StaticResource enumBooleanToGridLengthConverter}, ConverterParameter=SelectedItem}" />
                    <!--<RowDefinition Height="{Binding ExpandedPanel, Converter={StaticResource enumBooleanToGridLengthConverter}, ConverterParameter=CurrentTarget}" />-->
                    <RowDefinition Height="{Binding ExpandedPanel, Converter={StaticResource enumBooleanToGridLengthConverter}, ConverterParameter=RadarOptions}" />
                    <RowDefinition Height="{Binding ExpandedPanel, Converter={StaticResource enumBooleanToGridLengthConverter}, ConverterParameter=GridFilters}" />
                    <RowDefinition Height="{Binding ExpandedPanel, Converter={StaticResource enumBooleanToGridLengthConverter}, ConverterParameter=GridColumns}" />
                    <RowDefinition Height="{Binding ExpandedPanel, Converter={StaticResource enumBooleanToGridLengthConverter}, ConverterParameter=Avoidance}" />

                </Grid.RowDefinitions>
                <Expander Grid.Row="0" Header="Selected Item" Style="{DynamicResource AccordianExpander}" 
                          IsExpanded="{Binding ExpandedPanel, Converter={StaticResource enumBooleanConverter}, ConverterParameter=SelectedItem}">

                    <ScrollViewer Padding="10" HorizontalAlignment="Stretch" HorizontalContentAlignment="Stretch" VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Auto">

                                <Grid Visibility="{Binding SelectedObject, Converter={StaticResource NullToVisibilityConverter}}">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="*" />
                                <RowDefinition Height="*" />
                                <RowDefinition Height="*" />
                                <RowDefinition Height="*" />
                                <RowDefinition Height="*" />
                                <RowDefinition Height="*" />
                                <RowDefinition Height="*" />
                            </Grid.RowDefinitions>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />
                            </Grid.ColumnDefinitions>

                                    <Grid Grid.Row="0">
                                        <Button Command="{Binding CopySelected}" CommandParameter="{Binding SelectedObject}">Copy to Clipboard</Button> 
                                    </Grid>
                                    
                                    <Grid Grid.Row="1" HorizontalAlignment="Stretch" Margin="1,1,0,0">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="110"  />
                                            <ColumnDefinition Width="{Binding ActualWidth, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ScrollViewer}}, Converter={StaticResource OffsetWidthConverter}, ConverterParameter=140}" />
                                        </Grid.ColumnDefinitions>
                                        <Label Grid.Column="0" MinHeight="22" Content="Name">
                                            <Label.Background>
                                                <SolidColorBrush Color="DarkBlue" Opacity="0.2" />
                                            </Label.Background>
                                        </Label>
                                        <TextBlock Grid.Column="1" MinHeight="22"  TextTrimming="CharacterEllipsis" VerticalAlignment="Center" 
                                                   Text="{Binding SelectedObject.InternalName}">
                                            <TextBlock.Background>
                                                <SolidColorBrush Color="DarkBlue" Opacity="0.05" />
                                            </TextBlock.Background>
                                        </TextBlock>
                                    </Grid>

                                    <Grid  Grid.Row="2" HorizontalAlignment="Stretch" Margin="1,1,0,0">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="110"  />
                                            <ColumnDefinition Width="{Binding ActualWidth, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ScrollViewer}}, Converter={StaticResource OffsetWidthConverter}, ConverterParameter=140}" />
                                        </Grid.ColumnDefinitions>
                                        <Label Grid.Column="0" MinHeight="22" Content="Weight" >
                                            <Label.Background>
                                                <SolidColorBrush Color="DarkBlue" Opacity="0.2" />
                                            </Label.Background>
                                        </Label>
                                        <TextBlock Grid.Column="1" Margin="5,3,0,0" MinHeight="22" VerticalAlignment="Center" TextTrimming="CharacterEllipsis" 
                                                 
                                                 Text="{Binding SelectedObject.Weight}">
                                            <TextBlock.Background>
                                                <SolidColorBrush Color="DarkBlue" Opacity="0.05" />
                                            </TextBlock.Background>
                                        </TextBlock>                                                 
                                    </Grid>


                                    <Grid  Grid.Row="3" HorizontalAlignment="Stretch" Margin="1,1,0,0">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="110"  />
                                            <ColumnDefinition Width="{Binding ActualWidth, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ScrollViewer}}, Converter={StaticResource OffsetWidthConverter}, ConverterParameter=140}" />
                                        </Grid.ColumnDefinitions>
                                        <Label Grid.Column="0" MinHeight="22" Content="ClusterRiftValue" >
                                            <Label.Background>
                                                <SolidColorBrush Color="DarkBlue" Opacity="0.2" />
                                            </Label.Background>
                                        </Label>
                                        <TextBlock Grid.Column="1" Margin="5,3,0,0" MinHeight="22" VerticalAlignment="Center" TextTrimming="CharacterEllipsis" 
                                                 
                                                 Text="{Binding SelectedObject.RiftValueInRadius}">
                                            <TextBlock.Background>
                                                <SolidColorBrush Color="DarkBlue" Opacity="0.05" />
                                            </TextBlock.Background>
                                        </TextBlock>
                                    </Grid>

                                    <Grid Grid.Row="4" Width="Auto" HorizontalAlignment="Stretch" Margin="1,1,0,0" Visibility="{Binding SelectedObject.WeightInfo, Converter={StaticResource EmptyStringToVisibilityConverter}}">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="{Binding ActualWidth, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ScrollViewer}}, Converter={StaticResource OffsetWidthConverter}, ConverterParameter=40}" />
                                        </Grid.ColumnDefinitions>
                                        <Border Padding="10" Background="#555555">
                                            <StackPanel HorizontalAlignment="Stretch" VerticalAlignment="Stretch" MinHeight="0" >
                                                <Label>WeightInfo</Label>
                                                <TextBlock TextWrapping="Wrap" TextTrimming="CharacterEllipsis" 
                                                        Text="{Binding SelectedObject.WeightInfo}"  >
                                                </TextBlock>
                                            </StackPanel>
                                        </Border>
                                    </Grid>

                                    <Grid Grid.Row="5" Width="Auto" HorizontalAlignment="Stretch" Margin="1,1,0,0" Visibility="{Binding SelectedObject.IgnoreReason, Converter={StaticResource EmptyStringToVisibilityConverter}}">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="{Binding ActualWidth, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ScrollViewer}}, Converter={StaticResource OffsetWidthConverter}, ConverterParameter=40}" />
                                        </Grid.ColumnDefinitions>
                                        <Border Padding="10" Background="#555555">
                                        <StackPanel HorizontalAlignment="Stretch" VerticalAlignment="Stretch" MinHeight="0" >
                                            <Label>CacheInfo</Label>
                                                <TextBlock TextWrapping="Wrap" TextTrimming="CharacterEllipsis" 
                                                        Text="{Binding SelectedObject.IgnoreReason}"  >
                                                </TextBlock>
                                            </StackPanel>
                                        </Border>
                                    </Grid>

                                    <!--<Border Grid.Row="2" Margin="0,0,25,0" Padding="10">
                                        <TextBlock TextWrapping="Wrap"   TextTrimming="CharacterEllipsis" 
                                                Width="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ScrollViewer}},Path=ActualWidth}" 
                                                HorizontalAlignment="Stretch" VerticalAlignment="Stretch" MinHeight="22" 
                                                        Text="{Binding SelectedObject.WeightInfo}"  >
                                        </TextBlock>
                                    </Border>-->

                                    <!--<Grid Width="Auto" HorizontalAlignment="Stretch" Margin="1,1,0,0">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="100"  />
                                            <ColumnDefinition Width="{Binding ActualWidth, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ScrollViewer}}, Converter={StaticResource OffsetWidthConverter}, ConverterParameter=140}" />
                                        </Grid.ColumnDefinitions>
                                        <Label Grid.Column="0" MinHeight="22" Content="{Binding PropertyName}">
                                            <Label.Background>
                                                <SolidColorBrush Color="DodgerBlue" Opacity="0.2" />
                                            </Label.Background>
                                        </Label>
                                        <TextBlock Grid.Column="1" TextTrimming="CharacterEllipsis" Margin="5,3,0,0" MinHeight="22" Text="{Binding Value}">
                                            <TextBlock.Background>
                                                <SolidColorBrush Color="DodgerBlue" Opacity="0.05" />
                                            </TextBlock.Background>
                                        </TextBlock>
                                    </Grid>-->

                                    <ItemsControl  Grid.Row="6" ItemsSource="{Binding SelectedObject,  
                                        Converter={StaticResource propertyGridConverter}}" 
                                        ItemContainerStyle="{DynamicResource PropertyGridItemsSelector}" />

                        </Grid>
                    </ScrollViewer>

                </Expander>

                <!--<Expander Grid.Row="1" Header="Current Target" Style="{DynamicResource AccordianExpander}" 
                          IsExpanded="{Binding ExpandedPanel, Converter={StaticResource enumBooleanConverter}, ConverterParameter=CurrentTarget}">

                    <ScrollViewer Padding="10" VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Hidden">
                        <StackPanel Visibility="{Binding SelectedObject, Converter={StaticResource nullToVisibilityConverter}}">
                            <Border Padding="0,0,10,0">
                                <StackPanel>
                                    <Grid Width="Auto" HorizontalAlignment="Stretch" Margin="1,1,0,0" >
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="120"  />
                                            <ColumnDefinition Width="*" />
                                        </Grid.ColumnDefinitions>
                                        <Label Grid.Column="0" MinHeight="22" Content="Name">
                                            <Label.Background>
                                                <SolidColorBrush Color="DarkBlue" Opacity="0.2" />
                                            </Label.Background>
                                        </Label>
                                        <Label Grid.Column="1" MinHeight="22" Content="{Binding CurrentTarget.InternalName}">
                                            <Label.Background>
                                                <SolidColorBrush Color="DarkBlue" Opacity="0.05" />
                                            </Label.Background>
                                        </Label>
                                    </Grid>
                                    <Grid Width="Auto" HorizontalAlignment="Stretch" Margin="1,1,0,0" >
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="120"  />
                                            <ColumnDefinition Width="*" />
                                        </Grid.ColumnDefinitions>
                                        <Label Grid.Column="0" MinHeight="22" Content="Weight" >
                                            <Label.Background>
                                                <SolidColorBrush Color="DarkBlue" Opacity="0.2" />
                                            </Label.Background>
                                        </Label>
                                        <Label Grid.Column="1" MinHeight="22" Content="{Binding CurrentTarget.Weight}">
                                            <Label.Background>
                                                <SolidColorBrush Color="DarkBlue" Opacity="0.05" />
                                            </Label.Background>
                                        </Label>
                                    </Grid>
                                </StackPanel>
                            </Border>
                                                
                            <ItemsControl ItemsSource="{Binding CurrentTarget,  
                                Converter={StaticResource propertyGridConverter}}" 
                                ItemContainerStyle="{DynamicResource PropertyGridItemsSelector}" />
                                                
                        </StackPanel>
                    </ScrollViewer>
                </Expander>-->

                <Expander Grid.Row="1" Header="Radar Options" Style="{DynamicResource AccordianExpander}" 
                          IsExpanded="{Binding ExpandedPanel, Converter={StaticResource enumBooleanConverter}, ConverterParameter=RadarOptions}">

                    <ScrollViewer Padding="10" VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Hidden">

                        <StackPanel>
                            <WrapPanel DockPanel.Dock="Top" Margin="0,0,0,10">
                                <Label Foreground="WhiteSmoke" Margin="0,-2,5,0">Zoom:</Label>
                                <Slider Name="ZoomSlider" TickFrequency="1" Width="120" Margin="5,0,5,0" Minimum="1" Maximum="10" Height="10" Value="{Binding Zoom, Mode=TwoWay}"></Slider>
                                <Label Foreground="WhiteSmoke" Content="{Binding ElementName=ZoomSlider,Path=Value}"/>
                            </WrapPanel>


                            <ContentPresenter Content="{Binding 
                                Converter={StaticResourceExtension propertyValueConverter}, 
                                ConverterParameter=VisibilityFlags}" 
                                Style="{DynamicResource SimpleItemsControlSelector}" />

                        </StackPanel>

                    </ScrollViewer>

                </Expander>
                <Expander Grid.Row="2" Header="Grid Filters" Style="{DynamicResource AccordianExpander}" 
                          IsExpanded="{Binding ExpandedPanel, Converter={StaticResource enumBooleanConverter}, ConverterParameter=GridFilters}">

                    <ScrollViewer Padding="10" VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Hidden">
                        <StackPanel>
                            <Grid>
                                <Label Margin="-5,0,0,10">Sort:</Label>
                                <ComboBox Margin="35,0,0,10" ItemsSource="{Binding AllGridColumnFlags, Converter={StaticResource valueToCollectionConverter}}" SelectedItem="{Binding SelectedSort}"></ComboBox>
                            </Grid>
                            <CheckBox Margin="0,0,0,2" IsChecked="{Binding ShowWeighted}">Show Weighted Targets</CheckBox>
                            <CheckBox Margin="0,0,0,2" IsChecked="{Binding ShowPriority}">Show Priority Targets</CheckBox>
                            <CheckBox Margin="0,0,0,2" IsChecked="{Binding ShowIgnored}">Show Ignored Targets</CheckBox>
                            <CheckBox Margin="0,0,0,2" IsChecked="{Binding ShowUncategorized}">Show Uncategorized Targets</CheckBox>
                            <Label Margin="10,0,0,10">Columns:</Label>
                            <ContentPresenter Content="{Binding 
                                Converter={StaticResourceExtension propertyValueConverter}, 
                                ConverterParameter=SelectedColumns}" 
                                Style="{DynamicResource SimpleItemsControlSelector}" />
                        </StackPanel>
                    </ScrollViewer>

                </Expander>
                <!--<Expander Grid.Row="3" Header="Grid Columns" Style="{DynamicResource AccordianExpander}" 
                          IsExpanded="{Binding ExpandedPanel, Converter={StaticResource enumBooleanConverter}, ConverterParameter=GridColumns}">
                    <ScrollViewer VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Hidden">
       
                    </ScrollViewer>
                </Expander>-->
                <Expander Grid.Row="3" Header="Avoidance" Style="{DynamicResource AccordianExpander}" 
                       
                          IsExpanded="{Binding ExpandedPanel, Converter={StaticResource enumBooleanConverter}, ConverterParameter=Avoidance}">
                    <ScrollViewer VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Hidden">
                            <StackPanel Margin="10" >
                            
                            <GroupBox Header="Nearby Stats" Margin="0,0,0,10" HorizontalAlignment="Stretch">
                                <StackPanel>
                                    <Grid>
                                        <Label Content="Average WeightPct: "/>
                                        <Label Width="100" Content="{Binding NearbyStats.WeightPctAvg, Converter={StaticResource intToStringConverter}}" HorizontalAlignment="Right" HorizontalContentAlignment="Right"/>
                                    </Grid>
                                    <Grid>
                                        <Label Content="Total WeightPct: "/>
                                        <Label Width="100" Content="{Binding NearbyStats.WeightPctTotal, Converter={StaticResource intToStringConverter}}" HorizontalAlignment="Right" HorizontalContentAlignment="Right"/>
                                    </Grid>
                                    <Grid>
                                        <Label Content="Highest Weight: "/>
                                        <Label Width="100" Content="{Binding NearbyStats.HighestWeight, Converter={StaticResource intToStringConverter}}" HorizontalAlignment="Right" HorizontalContentAlignment="Right"/>
                                    </Grid>
                                    <Grid>
                                        <Label Content="Nodes Total: "/>
                                        <Label Width="100" Content="{Binding NearbyStats.NodesTotal, Converter={StaticResource intToStringConverter}}" HorizontalAlignment="Right" HorizontalContentAlignment="Right"/>
                                    </Grid>
                                </StackPanel>
                            </GroupBox>

                            <Label Content="Measurement Radius: "/>
                            <Slider Template="{DynamicResource SliderEditable}"                    
                                Maximum="30" 
                                Minimum="5" 
                                SmallChange="1" 
                                LargeChange="5"                                  
                                TickPlacement="None" IsMoveToPointEnabled="True"
                                Value="{Binding Settings.Avoidance.AvoiderLocalRadius}" 
                                HorizontalAlignment="Stretch" Margin="2"/>

                            <Label Content="Required Average WeightPct: "/>
                            <Slider Template="{DynamicResource SliderEditable}"                    
                                Maximum="10" 
                                Minimum="0" 
                                SmallChange="0.1" 
                                LargeChange="1"                                  
                                TickPlacement="None" IsMoveToPointEnabled="True"
                                Value="{Binding Settings.Avoidance.AvoiderNearbyPctAvgTrigger}" 
                                HorizontalAlignment="Stretch" Margin="2"/>

                            <Label Content="Required Total WeightPct: "/>
                            <Slider Template="{DynamicResource SliderEditable}"                    
                                Maximum="100" 
                                Minimum="0" 
                                SmallChange="1" 
                                LargeChange="5"                                  
                                TickPlacement="None" IsMoveToPointEnabled="True"
                                Value="{Binding Settings.Avoidance.MinimumNearbyWeightPctTotalTrigger}" 
                                HorizontalAlignment="Stretch" Margin="2"/>                            
                            
                            <Label Content="Required Highest Weight: "/>
                            <Slider Template="{DynamicResource SliderEditable}"                    
                                Maximum="10" 
                                Minimum="0" 
                                SmallChange="1" 
                                LargeChange="2"                                  
                                TickPlacement="None" IsMoveToPointEnabled="True"
                                Value="{Binding Settings.Avoidance.MinimumHighestNodeWeightTrigger}" 
                                HorizontalAlignment="Stretch" Margin="2"/>



                            <Button Height="30" Margin="5, 5, 5, 0" Command="{Binding SaveAvoidanceCommand}">Save</Button>
                            
                        </StackPanel>
                    </ScrollViewer>
                </Expander>
            </Grid>
                </DockPanel>
            </Grid>

        </DockPanel>

    </Grid>

    <!--<Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="1*"/>
            <RowDefinition Height="5"/>
            <RowDefinition Height="1*"/>
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="3*"/>
            <ColumnDefinition Width="5"/>
            <ColumnDefinition MinWidth="200" Width="1*"/>
        </Grid.ColumnDefinitions>
        


        <GridSplitter BorderThickness="0,1,0,0" BorderBrush="#666" Background="#444" Height="10" Grid.Row="1" Grid.Column="0" />

        <GridSplitter BorderThickness="1,0,0,0" BorderBrush="#666" Background="#444" Width="10" Grid.Row="0" Grid.RowSpan="3" Grid.Column="1" />



        
    </Grid>-->
</UserControl>